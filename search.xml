<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一级目录</title>
    <url>/%E4%B8%80%E7%BA%A7%E7%9B%AE%E5%BD%95.html</url>
    <content><![CDATA[<h2 id="1-语言"><a href="#1-语言" class="headerlink" title="1. 语言"></a>1. <strong><a href="/%E8%AF%AD%E8%A8%80.html">语言</a></strong></h2><h2 id="2-计算机基础"><a href="#2-计算机基础" class="headerlink" title="2. 计算机基础"></a>2. <strong><a href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80.html">计算机基础</a></strong></h2><h2 id="3-刷题记录"><a href="#3-刷题记录" class="headerlink" title="3. 刷题记录"></a>3. <strong><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95.html">刷题记录</a></strong></h2><span id="more"></span>
<h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. <strong><a href="/%E5%85%B6%E4%BB%96.html">其他</a></strong></h2>]]></content>
      <categories>
        <category>一级目录</category>
      </categories>
  </entry>
  <entry>
    <title>go</title>
    <url>/%E8%AF%AD%E8%A8%80/go.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>语言</category>
        <category>go</category>
        <category>目录</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>shell</title>
    <url>/%E8%AF%AD%E8%A8%80/shell.html</url>
    <content><![CDATA[<h2 id="1-概论"><a href="#1-概论" class="headerlink" title="1. 概论"></a>1. <strong><a href="/%E8%AF%AD%E8%A8%80/shell/%E6%A6%82%E8%AE%BA.html">概论</a></strong></h2><h2 id="2-注释"><a href="#2-注释" class="headerlink" title="2. 注释"></a>2. <strong><a href="/%E8%AF%AD%E8%A8%80/shell/%E6%B3%A8%E9%87%8A.html">注释</a></strong></h2><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. <strong><a href="/%E8%AF%AD%E8%A8%80/shell/%E5%8F%98%E9%87%8F.html">变量</a></strong></h2><span id="more"></span>
<h2 id="4-默认变量"><a href="#4-默认变量" class="headerlink" title="4. 默认变量"></a>4. <strong><a href="/%E8%AF%AD%E8%A8%80/shell/%E9%BB%98%E8%AE%A4%E5%8F%98%E9%87%8F.html">默认变量</a></strong></h2><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5. 数组"></a>5. <strong><a href="/%E8%AF%AD%E8%A8%80/shell/%E6%95%B0%E7%BB%84.html">数组</a></strong></h2><h2 id="6-expr命令"><a href="#6-expr命令" class="headerlink" title="6. expr命令"></a>6. <strong><a href="/%E8%AF%AD%E8%A8%80/shell/expr%E5%91%BD%E4%BB%A4.html">expr命令</a></strong></h2><h2 id="7-read命令"><a href="#7-read命令" class="headerlink" title="7. read命令"></a>7. <strong><a href="/%E8%AF%AD%E8%A8%80/shell/read%E5%91%BD%E4%BB%A4.html">read命令</a></strong></h2><h2 id="8-echo命令"><a href="#8-echo命令" class="headerlink" title="8. echo命令"></a>8. <strong><a href="/%E8%AF%AD%E8%A8%80/shell/echo%E5%91%BD%E4%BB%A4.html">echo命令</a></strong></h2><h2 id="9-printf命令"><a href="#9-printf命令" class="headerlink" title="9. printf命令"></a>9. <strong><a href="/%E8%AF%AD%E8%A8%80/shell/printf%E5%91%BD%E4%BB%A4.html">printf命令</a></strong></h2><h2 id="10-test命令与判断符号"><a href="#10-test命令与判断符号" class="headerlink" title="10. test命令与判断符号"></a>10. <strong><a href="/%E8%AF%AD%E8%A8%80/shell/test%E5%91%BD%E4%BB%A4%E4%B8%8E%E5%88%A4%E6%96%AD%E7%AC%A6%E5%8F%B7.html">test命令与判断符号</a></strong></h2><h2 id="11-判断语句"><a href="#11-判断语句" class="headerlink" title="11. 判断语句"></a>11. <strong><a href="/%E8%AF%AD%E8%A8%80/shell/%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5.html">判断语句</a></strong></h2><h2 id="12-循环语句"><a href="#12-循环语句" class="headerlink" title="12. 循环语句"></a>12. <strong><a href="/%E8%AF%AD%E8%A8%80/shell/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5.html">循环语句</a></strong></h2><h2 id="13-函数"><a href="#13-函数" class="headerlink" title="13. 函数"></a>13. <strong><a href="/%E8%AF%AD%E8%A8%80/shell/%E5%87%BD%E6%95%B0.html">函数</a></strong></h2><h2 id="14-exit命令"><a href="#14-exit命令" class="headerlink" title="14. exit命令"></a>14. <strong><a href="/%E8%AF%AD%E8%A8%80/shell/exit%E5%91%BD%E4%BB%A4.html">exit命令</a></strong></h2><h2 id="15-文件重定向"><a href="#15-文件重定向" class="headerlink" title="15. 文件重定向"></a>15. <strong><a href="/%E8%AF%AD%E8%A8%80/shell/%E6%96%87%E4%BB%B6%E9%87%8D%E5%AE%9A%E5%90%91.html">文件重定向</a></strong></h2><h2 id="16-引入外部脚本"><a href="#16-引入外部脚本" class="headerlink" title="16. 引入外部脚本"></a>16. <strong><a href="/%E8%AF%AD%E8%A8%80/shell/%E5%BC%95%E5%85%A5%E5%A4%96%E9%83%A8%E8%84%9A%E6%9C%AC.html">引入外部脚本</a></strong></h2>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
        <category>目录</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces1856E1.PermuTree-easy-version</title>
    <url>/codeforces1856E1-PermuTree-easy-version.html</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1856/problem/E1">原题链接 E1. PermuTree (easy version)</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">9</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> T, n, p, siz[N], ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; sum[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; si[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ss = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> v = g[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">            <span class="built_in">dfs1</span>(v, u);</span><br><span class="line">            siz[u] += siz[v];</span><br><span class="line">            si[u].<span class="built_in">push_back</span>(siz[v]);</span><br><span class="line">            ss += siz[v];</span><br><span class="line">            sum[u].<span class="built_in">push_back</span>(ss);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    siz[u]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> kk = <span class="number">0</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">f</span>(g[u].<span class="built_in">size</span>() + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(siz[u] + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= g[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        f[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> v = g[u][i];</span><br><span class="line">        <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">            f[i + <span class="number">1</span>][siz[v]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= siz[u]; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= siz[v]) f[i + <span class="number">1</span>][j] = (f[i][j - siz[v]] | f[i][j] | f[i + <span class="number">1</span>][j]);</span><br><span class="line">                <span class="keyword">else</span> f[i + <span class="number">1</span>][j] = f[i][j] | f[i + <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//			int x, y;</span></span><br><span class="line"><span class="comment">//			x = sum[u][i];</span></span><br><span class="line"><span class="comment">//			y = siz[u] - 1 - x;</span></span><br><span class="line"><span class="comment">//			int res = x * y;</span></span><br><span class="line"><span class="comment">//			kk = max(kk, res);</span></span><br><span class="line">            <span class="built_in">dfs2</span>(v, u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= siz[u]; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f[g[u].<span class="built_in">size</span>()][i]) &#123;</span><br><span class="line">            kk = <span class="built_in">max</span>(kk, (siz[u] - <span class="number">1</span> - i) * i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans += kk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; p;</span><br><span class="line">        g[p].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//	for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line">    <span class="comment">//		cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; siz[i] &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">    <span class="comment">//	&#125;</span></span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="comment">//	cout &lt;&lt; &quot;\t\t&quot; &lt;&lt; ans;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//	cin &gt;&gt; T;</span></span><br><span class="line">    T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces1856C.To-Become-Max</title>
    <url>/codeforces1856C-To-Become-Max.html</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1856/problem/C">原题链接 1856C. To Become Max</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">9</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> T, n, a[N], k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ck</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> rk = k;</span><br><span class="line">    <span class="keyword">while</span> (s &lt; n &amp;&amp; rk &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= a[s]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rk -= (x - a[s]);</span><br><span class="line">        s++;</span><br><span class="line">        x--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s == n) &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; a[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rk &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">ck</span>(i, x)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">while</span> (l != r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = l - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">//	cout &lt;&lt; &quot;\t\t\t&quot; &lt;&lt; ans &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces1856B.Good-Arrays</title>
    <url>/codeforces1856B-Good-Arrays.html</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1856/problem/B">原题链接 1856B. Good Arrays</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">9</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> T, n, a[N], mi[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> add = <span class="number">0</span>, sub = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            add++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sub += (a[i] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//	cout &lt;&lt; add &lt;&lt; &quot; &quot; &lt;&lt; sub &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">    <span class="keyword">if</span> (add &lt;= sub &amp;&amp; n != <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces1856A.Tales-of-a-Sort</title>
    <url>/codeforces1856A-Tales-of-a-Sort.html</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1856/problem/A">原题链接 1856A. Tales of a Sort</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">9</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> T, n, a[N], mi[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; a[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, a[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode334.递增的三元子序列</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode334-%E9%80%92%E5%A2%9E%E7%9A%84%E4%B8%89%E5%85%83%E5%AD%90%E5%BA%8F%E5%88%97.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/increasing-triplet-subsequence/">原题链接 334.递增的三元子序列</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">increasingTriplet</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	n := <span class="built_in">len</span>(nums)</span><br><span class="line">	mi := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">	ma := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">	mi[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">	ma[n<span class="number">-1</span>] = nums[n<span class="number">-1</span>]</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">		mi[i] = min(mi[i<span class="number">-1</span>], nums[i])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">		ma[i] = max(ma[i+<span class="number">1</span>], nums[i])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n<span class="number">-1</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> mi[i<span class="number">-1</span>] &lt; nums[i] &amp;&amp; nums[i] &lt; ma[i+<span class="number">1</span>] &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">		<span class="keyword">return</span> y</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> -min(-x, -y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode24.两两交换链表中的节点</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">原题链接 24.两两交换链表中的节点</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapPairs</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">	<span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> head</span><br><span class="line">	&#125;</span><br><span class="line">	head, head.Next, head.Next.Next = head.Next, swapPairs(head.Next.Next), head</span><br><span class="line">	<span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode6932.子序列最大优雅度</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode6932-%E5%AD%90%E5%BA%8F%E5%88%97%E6%9C%80%E5%A4%A7%E4%BC%98%E9%9B%85%E5%BA%A6.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/maximum-elegance-of-a-k-length-subsequence/">原题链接 6932.子序列最大优雅度</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMaximumElegance</span><span class="params">(items [][]<span class="type">int</span>, k <span class="type">int</span>)</span></span> <span class="type">int64</span> &#123;</span><br><span class="line">	max := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">			<span class="keyword">return</span> x</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> y</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	n := <span class="built_in">len</span>(items)</span><br><span class="line">	ans := <span class="number">0</span></span><br><span class="line">	sort.Slice(items, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> items[i][<span class="number">0</span>] &gt; items[j][<span class="number">0</span>]</span><br><span class="line">	&#125;)</span><br><span class="line">	tp := <span class="number">0</span></span><br><span class="line">	use := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;, <span class="number">0</span>)</span><br><span class="line">	st, hh := <span class="built_in">make</span>([]<span class="type">int</span>, n), <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; k; i++ &#123;</span><br><span class="line">		p, c := items[i][<span class="number">0</span>], items[i][<span class="number">1</span>]</span><br><span class="line">		tp += p</span><br><span class="line">		<span class="keyword">if</span> _, e := use[c]; e &#123;</span><br><span class="line">			st[hh], hh = p, hh+<span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">		use[c] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">		res := tp + <span class="built_in">len</span>(use)*<span class="built_in">len</span>(use)</span><br><span class="line">		ans = max(ans, res)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := k; i &lt; n &amp;&amp; hh != <span class="number">0</span>; i++ &#123;</span><br><span class="line">		p, c := items[i][<span class="number">0</span>], items[i][<span class="number">1</span>]</span><br><span class="line">		<span class="keyword">if</span> _, e := use[c]; !e &#123;</span><br><span class="line">			use[c] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">			tp, hh = tp+p-st[hh<span class="number">-1</span>], hh<span class="number">-1</span></span><br><span class="line">		&#125;</span><br><span class="line">		res := tp + <span class="built_in">len</span>(use)*<span class="built_in">len</span>(use)</span><br><span class="line">		ans = max(ans, res)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">int64</span>(ans)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode6951.找出最安全路径</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode6951-%E6%89%BE%E5%87%BA%E6%9C%80%E5%AE%89%E5%85%A8%E8%B7%AF%E5%BE%84.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/find-the-safest-path-in-a-grid">原题链接 6951.找出最安全路径</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maximumSafenessFactor</span><span class="params">(grid [][]<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	dx := []<span class="type">int</span>&#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;</span><br><span class="line">	dy := []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;</span><br><span class="line"></span><br><span class="line">	n := <span class="built_in">len</span>(grid)</span><br><span class="line">	rcx := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x*n + y</span><br><span class="line">	&#125;</span><br><span class="line">	xrc := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> x / n, x % n</span><br><span class="line">	&#125;</span><br><span class="line">	in := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span> &lt;= x &amp;&amp; x &lt; n &amp;&amp; <span class="number">0</span> &lt;= y &amp;&amp; y &lt; n</span><br><span class="line">	&#125;</span><br><span class="line">	q, hh, tt := <span class="built_in">make</span>([]<span class="type">int</span>, n*n), <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	g := <span class="built_in">make</span>([][]<span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> grid[i][j] == <span class="number">1</span> &#123;</span><br><span class="line">				g[<span class="number">0</span>] = <span class="built_in">append</span>(g[<span class="number">0</span>], rcx(i, j))</span><br><span class="line">				q[tt], tt = rcx(i, j), tt+<span class="number">1</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> hh &lt; tt &#123;</span><br><span class="line">		x, y := xrc(q[hh])</span><br><span class="line">		hh++</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">			nx, ny := x+dx[i], y+dy[i]</span><br><span class="line">			<span class="keyword">if</span> in(nx, ny) &amp;&amp; grid[nx][ny] == <span class="number">0</span> &#123;</span><br><span class="line">				grid[nx][ny] = grid[x][y] + <span class="number">1</span></span><br><span class="line">				q[tt], tt = rcx(nx, ny), tt+<span class="number">1</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// fmt.Println(grid)</span></span><br><span class="line"></span><br><span class="line">	l, r := <span class="number">0</span>, n*n</span><br><span class="line">	<span class="keyword">for</span> l &lt; r &#123;</span><br><span class="line">		check := <span class="function"><span class="keyword">func</span><span class="params">(m <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">			<span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span></span><br><span class="line">			vis := <span class="built_in">make</span>([][]<span class="type">bool</span>, n)</span><br><span class="line">			<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">				vis[i] = <span class="built_in">make</span>([]<span class="type">bool</span>, n)</span><br><span class="line">			&#125;</span><br><span class="line">			dfs = <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">				<span class="keyword">if</span> grid[x][y] &lt; m || vis[x][y] &#123;</span><br><span class="line">					<span class="keyword">return</span></span><br><span class="line">				&#125;</span><br><span class="line">				vis[x][y] = <span class="literal">true</span></span><br><span class="line">				<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">					nx, ny := x+dx[i], y+dy[i]</span><br><span class="line">					<span class="keyword">if</span> in(nx, ny) &#123;</span><br><span class="line">						dfs(nx, ny)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			dfs(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> vis[n<span class="number">-1</span>][n<span class="number">-1</span>]</span><br><span class="line">		&#125;</span><br><span class="line">		m := (l + r) &gt;&gt; <span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span> check(m) &#123;</span><br><span class="line">			l = m + <span class="number">1</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			r = m</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> l<span class="number">-2</span> &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l - <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode21.合并两个有序链表</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">原题链接 21.合并两个有序链表</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(list1 *ListNode, list2 *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">	<span class="keyword">if</span> list1 == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> list2</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> list2 == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> list1</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> list1.Val &lt; list2.Val &#123;</span><br><span class="line">		list1.Next = mergeTwoLists(list1.Next, list2)</span><br><span class="line">		<span class="keyword">return</span> list1</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		list2.Next = mergeTwoLists(list2.Next, list1)</span><br><span class="line">		<span class="keyword">return</span> list2</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode980.不同路径III</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode980-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84III.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/unique-paths-iii">原题链接 980.不同路径III</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dx [<span class="number">4</span>]<span class="type">int</span> = [<span class="number">4</span>]<span class="type">int</span>&#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">var</span> dy [<span class="number">4</span>]<span class="type">int</span> = [<span class="number">4</span>]<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> n, m, ans <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">uniquePathsIII</span><span class="params">(grid [][]<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	ans = <span class="number">0</span></span><br><span class="line">	n, m = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> grid[i][j] == <span class="number">1</span> &#123;</span><br><span class="line">				dfs(grid, i, j)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">end</span><span class="params">(a [][]<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> a[i][j] == <span class="number">0</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">in</span><span class="params">(a [][]<span class="type">int</span>, x, y <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span> &lt;= x &amp;&amp; x &lt; n &amp;&amp; <span class="number">0</span> &lt;= y &amp;&amp; y &lt; m</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(a [][]<span class="type">int</span>, x, y <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">		nx, ny := x+dx[i], y+dy[i]</span><br><span class="line">		<span class="keyword">if</span> !in(a, nx, ny) &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> a[nx][ny] == <span class="number">0</span> &#123;</span><br><span class="line">			a[nx][ny] = <span class="number">9</span></span><br><span class="line">			dfs(a, nx, ny)</span><br><span class="line">			a[nx][ny] = <span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> a[nx][ny] == <span class="number">2</span> &amp;&amp; end(a) &#123;</span><br><span class="line">			ans++</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode822.翻转卡片游戏</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode822-%E7%BF%BB%E8%BD%AC%E5%8D%A1%E7%89%87%E6%B8%B8%E6%88%8F.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/card-flipping-game">原题链接 822.翻转卡片游戏</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">flipgame</span><span class="params">(fronts []<span class="type">int</span>, backs []<span class="type">int</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> INF <span class="type">int</span> = <span class="number">0x3f3f3f3f</span></span><br><span class="line">	ans = INF</span><br><span class="line">	n := <span class="built_in">len</span>(fronts)</span><br><span class="line">	useless := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">	cnt := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> fronts[i] == backs[i] &#123;</span><br><span class="line">			useless[fronts[i]] = <span class="number">1</span></span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		cnt[fronts[i]]++</span><br><span class="line">		cnt[backs[i]]++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		v1, v2 := fronts[i], backs[i]</span><br><span class="line">		<span class="keyword">if</span> useless[v1] == <span class="number">0</span> &amp;&amp; cnt[v1] &lt;= n &#123;</span><br><span class="line">			ans = min(ans, v1)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> useless[v2] == <span class="number">0</span> &amp;&amp; cnt[v2] &lt;= n &#123;</span><br><span class="line">			ans = min(ans, v2)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ans == INF &#123;</span><br><span class="line">		ans = <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">		<span class="keyword">return</span> y</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode143.重排链表</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode143-%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/reorder-list">原题链接 143.重排链表</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reorderList</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line">	a := <span class="built_in">make</span>([]*ListNode, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">		a = <span class="built_in">append</span>(a, head)</span><br><span class="line">		head = head.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(a)<span class="number">-1</span>; i &lt;= j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> i == j<span class="number">-1</span> &#123;</span><br><span class="line">			a[j].Next = <span class="literal">nil</span></span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> i == j &#123;</span><br><span class="line">			a[i].Next, a[j].Next = <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		a[i].Next, a[j].Next = a[j], a[i+<span class="number">1</span>]</span><br><span class="line">	&#125;</span><br><span class="line">	head = a[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode142.环形链表II</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/linked-list-cycle-ii">原题链接 142.环形链表II</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">detectCycle</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">	<span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	c1, c2 := head.Next, head.Next.Next</span><br><span class="line">	<span class="keyword">for</span> c1 != <span class="literal">nil</span> &amp;&amp; c2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> c1 == c2 &#123;</span><br><span class="line">			ans := head</span><br><span class="line">			<span class="keyword">for</span> ans != c1 &#123;</span><br><span class="line">				ans = ans.Next</span><br><span class="line">				c1 = c1.Next</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> ans</span><br><span class="line">		&#125;</span><br><span class="line">		c1 = c1.Next</span><br><span class="line">		c2 = c2.Next</span><br><span class="line">		<span class="keyword">if</span> c2 == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">		c2 = c2.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode141.环形链表</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/linked-list-cycle/">原题链接 141. 环形链表</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCycle</span><span class="params">(head *ListNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	c1, c2 := head.Next, head.Next.Next</span><br><span class="line">	<span class="keyword">for</span> c1 != <span class="literal">nil</span> &amp;&amp; c2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> c1 == c2 &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">		c1 = c1.Next</span><br><span class="line">		<span class="keyword">if</span> c2.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">		c2 = c2.Next.Next</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode1851.包含每个查询的最小区间</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode1851-%E5%8C%85%E5%90%AB%E6%AF%8F%E4%B8%AA%E6%9F%A5%E8%AF%A2%E7%9A%84%E6%9C%80%E5%B0%8F%E5%8C%BA%E9%97%B4.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/minimum-interval-to-include-each-querys">原题链接 1851. 包含每个查询的最小区间</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minInterval</span><span class="params">(intervals [][]<span class="type">int</span>, queries []<span class="type">int</span>)</span></span> (ans []<span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> INF <span class="type">int</span> = <span class="number">0x3f3f3f3f</span></span><br><span class="line">	used := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">	ks := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">	ks = <span class="built_in">append</span>(ks, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> intervals &#123;</span><br><span class="line">		<span class="keyword">if</span> used[v[<span class="number">0</span>]] == <span class="number">0</span> &#123;</span><br><span class="line">			ks = <span class="built_in">append</span>(ks, v[<span class="number">0</span>])</span><br><span class="line">			used[v[<span class="number">0</span>]] = <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> used[v[<span class="number">1</span>]] == <span class="number">0</span> &#123;</span><br><span class="line">			ks = <span class="built_in">append</span>(ks, v[<span class="number">1</span>])</span><br><span class="line">			used[v[<span class="number">1</span>]] = <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> queries &#123;</span><br><span class="line">		<span class="keyword">if</span> used[v] == <span class="number">0</span> &#123;</span><br><span class="line">			ks = <span class="built_in">append</span>(ks, v)</span><br><span class="line">			used[v] = <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sort.Ints(ks)</span><br><span class="line">	<span class="comment">// fmt.Println(ks)</span></span><br><span class="line">	inv := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="built_in">len</span>(ks))</span><br><span class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> ks &#123;</span><br><span class="line">		inv[v] = i</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	min := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">			<span class="keyword">return</span> y</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">type</span> node <span class="keyword">struct</span> &#123;</span><br><span class="line">		l, r  <span class="type">int</span></span><br><span class="line">		mi, t <span class="type">int</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> pushup <span class="function"><span class="keyword">func</span><span class="params">(u <span class="type">int</span>)</span></span></span><br><span class="line">	<span class="keyword">var</span> pushdown <span class="function"><span class="keyword">func</span><span class="params">(u <span class="type">int</span>)</span></span></span><br><span class="line">	<span class="keyword">var</span> build <span class="function"><span class="keyword">func</span><span class="params">(u, l, r <span class="type">int</span>)</span></span></span><br><span class="line">	<span class="keyword">var</span> modify <span class="function"><span class="keyword">func</span><span class="params">(u, l, r, x <span class="type">int</span>)</span></span></span><br><span class="line">	<span class="keyword">var</span> query <span class="function"><span class="keyword">func</span><span class="params">(u, k <span class="type">int</span>)</span></span> <span class="type">int</span></span><br><span class="line">	n := <span class="built_in">len</span>(ks) - <span class="number">1</span></span><br><span class="line">	tr := <span class="built_in">make</span>([]node, n&lt;&lt;<span class="number">2</span>)</span><br><span class="line">	pushup = <span class="function"><span class="keyword">func</span><span class="params">(u <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		tr[u].mi = min(tr[u&lt;&lt;<span class="number">1</span>].mi, tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mi)</span><br><span class="line">	&#125;</span><br><span class="line">	pushdown = <span class="function"><span class="keyword">func</span><span class="params">(u <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		tr[u&lt;&lt;<span class="number">1</span>].mi = min(tr[u&lt;&lt;<span class="number">1</span>].mi, tr[u].t)</span><br><span class="line">		tr[u&lt;&lt;<span class="number">1</span>].t = min(tr[u&lt;&lt;<span class="number">1</span>].t, tr[u].t)</span><br><span class="line">		tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mi = min(tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mi, tr[u].t)</span><br><span class="line">		tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].t = min(tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].t, tr[u].t)</span><br><span class="line">	&#125;</span><br><span class="line">	build = <span class="function"><span class="keyword">func</span><span class="params">(u, l, r <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		tr[u].l, tr[u].r, tr[u].t = l, r, INF</span><br><span class="line">		<span class="keyword">if</span> l == r &#123;</span><br><span class="line">			tr[u].mi = INF</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		m := (l + r) &gt;&gt; <span class="number">1</span></span><br><span class="line">		build(u&lt;&lt;<span class="number">1</span>, l, m)</span><br><span class="line">		build(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, m+<span class="number">1</span>, r)</span><br><span class="line">		pushup(u)</span><br><span class="line">	&#125;</span><br><span class="line">	modify = <span class="function"><span class="keyword">func</span><span class="params">(u, l, r, x <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r &#123;</span><br><span class="line">			tr[u].mi = min(tr[u].mi, x)</span><br><span class="line">			tr[u].t = min(tr[u].t, x)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		pushdown(u)</span><br><span class="line">		m := (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span> l &lt;= m &#123;</span><br><span class="line">			modify(u&lt;&lt;<span class="number">1</span>, l, r, x)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> m+<span class="number">1</span> &lt;= r &#123;</span><br><span class="line">			modify(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, l, r, x)</span><br><span class="line">		&#125;</span><br><span class="line">		pushup(u)</span><br><span class="line">	&#125;</span><br><span class="line">	query = <span class="function"><span class="keyword">func</span><span class="params">(u, k <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> tr[u].l == k &amp;&amp; tr[u].r == k &#123;</span><br><span class="line">			<span class="keyword">return</span> tr[u].mi</span><br><span class="line">		&#125;</span><br><span class="line">		pushdown(u)</span><br><span class="line">		m := (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span> k &lt;= m &#123;</span><br><span class="line">			<span class="keyword">return</span> query(u&lt;&lt;<span class="number">1</span>, k)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> query(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, k)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	build(<span class="number">1</span>, <span class="number">1</span>, n)</span><br><span class="line">	<span class="comment">// fmt.Println(tr)</span></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> intervals &#123;</span><br><span class="line">		l, r := v[<span class="number">0</span>], v[<span class="number">1</span>]</span><br><span class="line">		modify(<span class="number">1</span>, inv[l], inv[r], r-l+<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> queries &#123;</span><br><span class="line">		res := query(<span class="number">1</span>, inv[v])</span><br><span class="line">		<span class="keyword">if</span> res == INF &#123;</span><br><span class="line">			res = <span class="number">-1</span></span><br><span class="line">		&#125;</span><br><span class="line">		ans = <span class="built_in">append</span>(ans, res)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// fmt.Println(tr)</span></span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode2050.并行课程III</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode2050-%E5%B9%B6%E8%A1%8C%E8%AF%BE%E7%A8%8BIII.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/parallel-courses-iii">原题链接 2050. 并行课程III</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minimumTime</span><span class="params">(n <span class="type">int</span>, relations [][]<span class="type">int</span>, time []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	g := <span class="built_in">make</span>([][]<span class="type">int</span>, n+<span class="number">1</span>)</span><br><span class="line">	in := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> relations &#123;</span><br><span class="line">		x, y := v[<span class="number">0</span>], v[<span class="number">1</span>]</span><br><span class="line">		g[y] = <span class="built_in">append</span>(g[y], x)</span><br><span class="line">		in[x]++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> in[i] == <span class="number">0</span> &#123;</span><br><span class="line">			g[<span class="number">0</span>] = <span class="built_in">append</span>(g[<span class="number">0</span>], i)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	f := <span class="built_in">make</span>([]<span class="type">int</span>, n+<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">var</span> dp <span class="function"><span class="keyword">func</span><span class="params">(u <span class="type">int</span>)</span></span> <span class="type">int</span></span><br><span class="line">	dp = <span class="function"><span class="keyword">func</span><span class="params">(u <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> f[u] != <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> f[u]</span><br><span class="line">		&#125;</span><br><span class="line">		tmp := <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> _, v := <span class="keyword">range</span> g[u] &#123;</span><br><span class="line">			tmp = max(tmp, dp(v))</span><br><span class="line">		&#125;</span><br><span class="line">		f[u] = max(f[u], time[u]+tmp)</span><br><span class="line">		<span class="keyword">return</span> f[u]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dp(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode2500.删除每行中的最大值</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode2500-%E5%88%A0%E9%99%A4%E6%AF%8F%E8%A1%8C%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/delete-greatest-value-in-each-row">原题链接 2500.删除每行中的最大值</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteGreatestValue</span><span class="params">(grid [][]<span class="type">int</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">	max := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">			<span class="keyword">return</span> x</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> y</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> grid &#123;</span><br><span class="line">		sort.Ints(grid[i])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="built_in">len</span>(grid[<span class="number">0</span>]) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">		res := <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> j := <span class="keyword">range</span> grid &#123;</span><br><span class="line">			res = max(res, grid[j][i])</span><br><span class="line">		&#125;</span><br><span class="line">		ans += res</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode2791.树中可以形成回文的路径数</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode2791-%E6%A0%91%E4%B8%AD%E5%8F%AF%E4%BB%A5%E5%BD%A2%E6%88%90%E5%9B%9E%E6%96%87%E7%9A%84%E8%B7%AF%E5%BE%84%E6%95%B0.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/count-paths-that-can-form-a-palindrome-in-a-tree">原题链接 2791. 树中可以形成回文的路径数</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countPalindromePaths</span><span class="params">(parent []<span class="type">int</span>, s <span class="type">string</span>)</span></span> (ans <span class="type">int64</span>) &#123;</span><br><span class="line">	n := <span class="built_in">len</span>(parent)</span><br><span class="line">	g := <span class="built_in">make</span>([][]<span class="type">int</span>, n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">		v := parent[i]</span><br><span class="line">		g[v] = <span class="built_in">append</span>(g[v], i)</span><br><span class="line">	&#125;</span><br><span class="line">	val := <span class="number">0</span></span><br><span class="line">	mp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, n)</span><br><span class="line">	<span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(u, fa <span class="type">int</span>)</span></span></span><br><span class="line">	dfs = <span class="function"><span class="keyword">func</span><span class="params">(u, fa <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		mp[val]++</span><br><span class="line">		<span class="comment">// fmt.Println(u,val)</span></span><br><span class="line">		<span class="keyword">for</span> _, v := <span class="keyword">range</span> g[u] &#123;</span><br><span class="line">			val ^= <span class="number">1</span> &lt;&lt; (s[v] - <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">			dfs(v, fa)</span><br><span class="line">			val ^= <span class="number">1</span> &lt;&lt; (s[v] - <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(<span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> mp &#123;</span><br><span class="line">		ans += <span class="type">int64</span>(v)*<span class="type">int64</span>(v) - <span class="type">int64</span>(v)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> mp &#123;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">26</span>; i++ &#123;</span><br><span class="line">			res := mp[k^(<span class="number">1</span>&lt;&lt;i)]</span><br><span class="line">			ans += <span class="type">int64</span>(res) * <span class="type">int64</span>(v)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// fmt.Println(mp)</span></span><br><span class="line">	<span class="keyword">return</span> ans / <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode2790.长度递增组的最大数目</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode2790-%E9%95%BF%E5%BA%A6%E9%80%92%E5%A2%9E%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E7%9B%AE.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/maximum-number-of-groups-with-increasing-length">原题链接 2790. 长度递增组的最大数目</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxIncreasingGroups</span><span class="params">(a []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	cur, re := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	sort.Ints(a)</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">		<span class="keyword">if</span> v+re &gt; cur &#123;</span><br><span class="line">			cur++</span><br><span class="line">			re -= cur - v</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			re += v</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cur</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode946.验证栈序列</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode946-%E9%AA%8C%E8%AF%81%E6%A0%88%E5%BA%8F%E5%88%97.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/validate-stack-sequences">原题链接 946.验证栈序列</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">validateStackSequences</span><span class="params">(pushed []<span class="type">int</span>, popped []<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	n := <span class="built_in">len</span>(pushed)</span><br><span class="line">	st, hh := <span class="built_in">make</span>([]<span class="type">int</span>, n), <span class="number">0</span></span><br><span class="line">	i, j := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i != n &#123;</span><br><span class="line">		<span class="keyword">for</span> (hh == <span class="number">0</span> || st[hh<span class="number">-1</span>] != popped[i]) &amp;&amp; j != n &#123;</span><br><span class="line">			st[hh] = pushed[j]</span><br><span class="line">			hh++</span><br><span class="line">			j++</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> hh == <span class="number">0</span> || st[hh<span class="number">-1</span>] != popped[i] &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		hh--</span><br><span class="line">		i++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> i == n &amp;&amp; hh == <span class="number">0</span> &amp;&amp; j == n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode2569.更新数组后处理求和查询</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode2569-%E6%9B%B4%E6%96%B0%E6%95%B0%E7%BB%84%E5%90%8E%E5%A4%84%E7%90%86%E6%B1%82%E5%92%8C%E6%9F%A5%E8%AF%A2.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/handling-sum-queries-after-update/">原题链接 2569. 更新数组后处理求和查询</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleQuery</span><span class="params">(nums1 []<span class="type">int</span>, nums2 []<span class="type">int</span>, queries [][]<span class="type">int</span>)</span></span> (ans []<span class="type">int64</span>) &#123;</span><br><span class="line">	<span class="keyword">type</span> node <span class="keyword">struct</span> &#123;</span><br><span class="line">		l, r   <span class="type">int</span></span><br><span class="line">		sum, t <span class="type">int</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> build <span class="function"><span class="keyword">func</span><span class="params">(u, l, r <span class="type">int</span>, tr []node)</span></span></span><br><span class="line">	<span class="keyword">var</span> pushup <span class="function"><span class="keyword">func</span><span class="params">(u <span class="type">int</span>, tr []node)</span></span></span><br><span class="line">	<span class="keyword">var</span> pushdown <span class="function"><span class="keyword">func</span><span class="params">(u <span class="type">int</span>, tr []node)</span></span></span><br><span class="line">	<span class="keyword">var</span> modify <span class="function"><span class="keyword">func</span><span class="params">(u, l, r, q <span class="type">int</span>, tr []node)</span></span></span><br><span class="line">	<span class="keyword">var</span> query <span class="function"><span class="keyword">func</span><span class="params">(u, l, r <span class="type">int</span>, tr []node)</span></span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> init = <span class="function"><span class="keyword">func</span><span class="params">(n <span class="type">int</span>)</span></span> (res []node) &#123;</span><br><span class="line">		res = <span class="built_in">make</span>([]node, n&lt;&lt;<span class="number">2</span>)</span><br><span class="line">		build(<span class="number">1</span>, <span class="number">1</span>, n, res)</span><br><span class="line">		<span class="keyword">return</span> res</span><br><span class="line">	&#125;</span><br><span class="line">	pushup = <span class="function"><span class="keyword">func</span><span class="params">(u <span class="type">int</span>, tr []node)</span></span> &#123;</span><br><span class="line">		tr[u].sum = tr[u&lt;&lt;<span class="number">1</span>].sum + tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum</span><br><span class="line">	&#125;</span><br><span class="line">	pushdown = <span class="function"><span class="keyword">func</span><span class="params">(u <span class="type">int</span>, tr []node)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> tr[u].t == <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		tr[u&lt;&lt;<span class="number">1</span>].t ^= tr[u].t</span><br><span class="line">		tr[u&lt;&lt;<span class="number">1</span>].sum = (tr[u&lt;&lt;<span class="number">1</span>].r - tr[u&lt;&lt;<span class="number">1</span>].l + <span class="number">1</span>) - tr[u&lt;&lt;<span class="number">1</span>].sum</span><br><span class="line">		tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].t ^= tr[u].t</span><br><span class="line">		tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum = (tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r - tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l + <span class="number">1</span>) - tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum</span><br><span class="line">		tr[u].t = <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	build = <span class="function"><span class="keyword">func</span><span class="params">(u, l, r <span class="type">int</span>, tr []node)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> l == r &#123;</span><br><span class="line">			tr[u] = node&#123;l, r, nums1[l<span class="number">-1</span>], <span class="number">0</span>&#125;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		tr[u].l, tr[u].r = l, r</span><br><span class="line">		m := (l + r) &gt;&gt; <span class="number">1</span></span><br><span class="line">		build(u&lt;&lt;<span class="number">1</span>, l, m, tr)</span><br><span class="line">		build(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, m+<span class="number">1</span>, r, tr)</span><br><span class="line">		pushup(u, tr)</span><br><span class="line">	&#125;</span><br><span class="line">	modify = <span class="function"><span class="keyword">func</span><span class="params">(u, l, r, q <span class="type">int</span>, tr []node)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r &#123;</span><br><span class="line">			tr[u].t ^= q</span><br><span class="line">			tr[u].sum = (tr[u].r - tr[u].l + <span class="number">1</span>) - tr[u].sum</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		pushdown(u, tr)</span><br><span class="line">		m := (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span> l &lt;= m &#123;</span><br><span class="line">			modify(u&lt;&lt;<span class="number">1</span>, l, r, q, tr)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> m+<span class="number">1</span> &lt;= r &#123;</span><br><span class="line">			modify(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, l, r, q, tr)</span><br><span class="line">		&#125;</span><br><span class="line">		pushup(u, tr)</span><br><span class="line">	&#125;</span><br><span class="line">	query = <span class="function"><span class="keyword">func</span><span class="params">(u, l, r <span class="type">int</span>, tr []node)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r &#123;</span><br><span class="line">			<span class="keyword">return</span> tr[u].sum</span><br><span class="line">		&#125;</span><br><span class="line">		pushdown(u, tr)</span><br><span class="line">		m := (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span></span><br><span class="line">		res := <span class="number">0</span></span><br><span class="line">		<span class="keyword">if</span> l &lt;= m &#123;</span><br><span class="line">			res += query(u&lt;&lt;<span class="number">1</span>, l, r, tr)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> m+<span class="number">1</span> &lt;= r &#123;</span><br><span class="line">			res += query(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, l, r, tr)</span><br><span class="line">		&#125;</span><br><span class="line">		pushup(u, tr)</span><br><span class="line">		<span class="keyword">return</span> res</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	res := <span class="type">int64</span>(<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> nums2 &#123;</span><br><span class="line">		res += <span class="type">int64</span>(v)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	n := <span class="built_in">len</span>(nums1)</span><br><span class="line">	tr := init(n)</span><br><span class="line">	<span class="comment">// fmt.Println(query(1,1,n,tr))</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> queries &#123;</span><br><span class="line">		<span class="keyword">if</span> v[<span class="number">0</span>] == <span class="number">1</span> &#123;</span><br><span class="line">			modify(<span class="number">1</span>, v[<span class="number">1</span>]+<span class="number">1</span>, v[<span class="number">2</span>]+<span class="number">1</span>, <span class="number">1</span>, tr)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> v[<span class="number">0</span>] == <span class="number">2</span> &#123;</span><br><span class="line">			res += <span class="type">int64</span>(query(<span class="number">1</span>, <span class="number">1</span>, n, tr)) * <span class="type">int64</span>(v[<span class="number">1</span>])</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> v[<span class="number">0</span>] == <span class="number">3</span> &#123;</span><br><span class="line">			ans = <span class="built_in">append</span>(ans, res)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// fmt.Println(res)</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode2208.将数组和减半的最少操作次数</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode2208-%E5%B0%86%E6%95%B0%E7%BB%84%E5%92%8C%E5%87%8F%E5%8D%8A%E7%9A%84%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/minimum-operations-to-halve-array-sum/">原题链接 2208. 将数组和减半的最少操作次数</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">halveArray</span><span class="params">(nums []<span class="type">int</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">	sort.Ints(nums)</span><br><span class="line">	a := <span class="built_in">make</span>([]<span class="type">float64</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">var</span> sum <span class="type">float64</span> = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">		cur := <span class="type">float64</span>(v)</span><br><span class="line">		sum += cur</span><br><span class="line">		<span class="keyword">for</span> <span class="number">4</span>*cur &gt;= <span class="type">float64</span>(nums[<span class="built_in">len</span>(nums)/<span class="number">2</span>]) &#123;</span><br><span class="line">			cur /= <span class="number">2.0</span></span><br><span class="line">			a = <span class="built_in">append</span>(a, cur)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sum /= <span class="number">2.0</span></span><br><span class="line">	sort.Float64s(a)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="built_in">len</span>(a) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">		<span class="keyword">if</span> sum &lt;= <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		sum -= a[i]</span><br><span class="line">		ans++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<details>
    <summary>展开答案(c++)</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">halveArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;<span class="type">double</span>&gt; q;</span><br><span class="line">        <span class="type">double</span> sum = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i: nums) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (res * <span class="number">2</span> &lt; sum) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="type">double</span> cur = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            res += cur / <span class="number">2.0</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(cur / <span class="number">2.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode771.宝石与石头</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode771-%E5%AE%9D%E7%9F%B3%E4%B8%8E%E7%9F%B3%E5%A4%B4.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/jewels-and-stones/">原题链接 771. 宝石与石头</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numJewelsInStones</span><span class="params">(jewels <span class="type">string</span>, stones <span class="type">string</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">	mp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">rune</span>]<span class="type">int</span>, <span class="built_in">len</span>(jewels))</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> jewels &#123;</span><br><span class="line">		mp[v] = <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> stones &#123;</span><br><span class="line">		ans += mp[v]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode42.接雨水</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode42-%E6%8E%A5%E9%9B%A8%E6%B0%B4.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/trapping-rain-water">原题链接 42. 接雨水</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trap</span><span class="params">(height []<span class="type">int</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">	n := <span class="built_in">len</span>(height)</span><br><span class="line">	a := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">	cur := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		cur = max(cur, height[i])</span><br><span class="line">		a[i] = cur</span><br><span class="line">	&#125;</span><br><span class="line">	cur = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">		cur = max(cur, height[i])</span><br><span class="line">		a[i] = min(a[i], cur)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		ans += a[i] - height[i]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> -min(-x, -y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &lt; y &#123;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode860.柠檬水找零</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode860-%E6%9F%A0%E6%AA%AC%E6%B0%B4%E6%89%BE%E9%9B%B6.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/lemonade-change">原题链接 860. 柠檬水找零</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lemonadeChange</span><span class="params">(bills []<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	r1, r2, r3 := <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> bills &#123;</span><br><span class="line">		<span class="keyword">if</span> v == <span class="number">5</span> &#123;</span><br><span class="line">			r1++</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> v == <span class="number">10</span> &#123;</span><br><span class="line">			r1--</span><br><span class="line">			r2++</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> v == <span class="number">20</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> r2 &gt; <span class="number">0</span> &#123;</span><br><span class="line">				r2--</span><br><span class="line">				r1--</span><br><span class="line">				r3++</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				r1 -= <span class="number">3</span></span><br><span class="line">				r3++</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> r1 &lt; <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode1499.满足不等式的最大值</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode1499-%E6%BB%A1%E8%B6%B3%E4%B8%8D%E7%AD%89%E5%BC%8F%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/maximum-sum-circular-subarray/">原题链接 918. 环形子数组的最大和</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMaxValueOfEquation</span><span class="params">(points [][]<span class="type">int</span>, k <span class="type">int</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">	ans = <span class="number">-0x3f3f3f3f</span></span><br><span class="line">	hh, tt := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	queue := <span class="built_in">make</span>([][<span class="number">2</span>]<span class="type">int</span>, <span class="built_in">len</span>(points))</span><br><span class="line">	queue[<span class="number">0</span>] = [<span class="number">2</span>]<span class="type">int</span>&#123;points[<span class="number">0</span>][<span class="number">0</span>], points[<span class="number">0</span>][<span class="number">1</span>] - points[<span class="number">0</span>][<span class="number">0</span>]&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(points); i++ &#123;</span><br><span class="line">		x, y := points[i][<span class="number">0</span>], points[i][<span class="number">1</span>]</span><br><span class="line">		<span class="keyword">for</span> hh &lt;= tt &amp;&amp; queue[hh][<span class="number">0</span>]+k &lt; x &#123;</span><br><span class="line">			hh++</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> hh &lt;= tt &#123;</span><br><span class="line">			res := x + y + queue[hh][<span class="number">1</span>]</span><br><span class="line">			ans = max(ans, res)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> hh &lt;= tt &amp;&amp; queue[tt][<span class="number">1</span>] &lt; y-x &#123;</span><br><span class="line">			tt--</span><br><span class="line">		&#125;</span><br><span class="line">		tt++</span><br><span class="line">		queue[tt] = [<span class="number">2</span>]<span class="type">int</span>&#123;x, y - x&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<details>
    <summary>展开答案(c++)</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxValueOfEquation</span><span class="params">(vector &lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;points, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">-1e9</span>;</span><br><span class="line">        priority_queue &lt;PII&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;points[<span class="number">0</span>][<span class="number">1</span>] - points[<span class="number">0</span>][<span class="number">0</span>], points[<span class="number">0</span>][<span class="number">0</span>]&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; points.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> x = points[i][<span class="number">0</span>], y = points[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span> (q.<span class="built_in">size</span>() &amp;&amp; q.<span class="built_in">top</span>().y + k &lt; x) &#123;</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (q.<span class="built_in">size</span>() != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> res = x + y + q.<span class="built_in">top</span>().x;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, res);</span><br><span class="line">            &#125;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;y - x, x&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode918.环形子数组的最大和</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode918-%E7%8E%AF%E5%BD%A2%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/maximum-sum-circular-subarray/">原题链接 918. 环形子数组的最大和</a></p>
<hr>
<details>
    <summary>展开答案</summary>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubarraySumCircular</span><span class="params">(nums []<span class="type">int</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">	n, sum := <span class="built_in">len</span>(nums), <span class="number">0</span></span><br><span class="line">	dp1 := <span class="built_in">make</span>([]<span class="type">int</span>, n+<span class="number">1</span>)</span><br><span class="line">	dp2 := <span class="built_in">make</span>([]<span class="type">int</span>, n+<span class="number">1</span>)</span><br><span class="line">	ans = <span class="number">-0x3f3f3f3f</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		sum += nums[i]</span><br><span class="line">		ans = max(ans, nums[i])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ans &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> ans</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">		dp1[i] = max(dp1[i<span class="number">-1</span>]+nums[i<span class="number">-1</span>], nums[i<span class="number">-1</span>])</span><br><span class="line">		dp2[i] = min(dp2[i<span class="number">-1</span>]+nums[i<span class="number">-1</span>], nums[i<span class="number">-1</span>])</span><br><span class="line">		res := max(dp1[i], sum-dp2[i])</span><br><span class="line">		ans = max(ans, res)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> -max(-x, -y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode874.模拟行走机器人</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode874-%E6%A8%A1%E6%8B%9F%E8%A1%8C%E8%B5%B0%E6%9C%BA%E5%99%A8%E4%BA%BA.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/walking-robot-simulation/">原题链接 874. 模拟行走机器人</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">robotSim</span><span class="params">(commands []<span class="type">int</span>, obstacles [][]<span class="type">int</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">	dx := [<span class="number">4</span>]<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;</span><br><span class="line">	dy := [<span class="number">4</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">	mp := <span class="built_in">make</span>(<span class="keyword">map</span>[[<span class="number">2</span>]<span class="type">int</span>]<span class="type">int</span>, <span class="built_in">len</span>(obstacles))</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> obstacles &#123;</span><br><span class="line">		mp[[<span class="number">2</span>]<span class="type">int</span>&#123;v[<span class="number">0</span>], v[<span class="number">1</span>]&#125;] = <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	cx, cy, d := <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> commands &#123;</span><br><span class="line">		<span class="keyword">if</span> v == <span class="number">-2</span> &#123;</span><br><span class="line">			d = (d + <span class="number">3</span>) % <span class="number">4</span></span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> v == <span class="number">-1</span> &#123;</span><br><span class="line">			d = (d + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; v; i++ &#123;</span><br><span class="line">				nx, ny := cx+dx[d], cy+dy[d]</span><br><span class="line">				<span class="keyword">if</span> mp[[<span class="number">2</span>]<span class="type">int</span>&#123;nx, ny&#125;] == <span class="number">0</span> &#123;</span><br><span class="line">					cx, cy = nx, ny</span><br><span class="line">					ans = max(ans, nx*nx+ny*ny)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode415.字符串相加</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode415-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/add-strings/">原题链接 415. 字符串相加</a></p>
<hr>
<details> 
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addStrings</span><span class="params">(num1 <span class="type">string</span>, num2 <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	x := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(num1))</span><br><span class="line">	y := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(num2))</span><br><span class="line">	<span class="keyword">for</span> i := <span class="built_in">len</span>(num1) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">		x[<span class="built_in">len</span>(num1)<span class="number">-1</span>-i] = <span class="type">int</span>(num1[i] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="built_in">len</span>(num2) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">		y[<span class="built_in">len</span>(num2)<span class="number">-1</span>-i] = <span class="type">int</span>(num2[i] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(x) &lt; <span class="built_in">len</span>(y) &#123;</span><br><span class="line">		x, y = y, x</span><br><span class="line">	&#125;</span><br><span class="line">	res := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(x))</span><br><span class="line">	t := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(x); i++ &#123;</span><br><span class="line">		t += x[i]</span><br><span class="line">		<span class="keyword">if</span> i &lt; <span class="built_in">len</span>(y) &#123;</span><br><span class="line">			t += y[i]</span><br><span class="line">		&#125;</span><br><span class="line">		res[i] = <span class="type">byte</span>(t%<span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">		t /= <span class="number">10</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> t != <span class="number">0</span> &#123;</span><br><span class="line">		res = <span class="built_in">append</span>(res, <span class="type">byte</span>(t+<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(res)<span class="number">-1</span>; i &lt; j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">		res[i], res[j] = res[j], res[i]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">string</span>(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode834.树中距离之和</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode834-%E6%A0%91%E4%B8%AD%E8%B7%9D%E7%A6%BB%E4%B9%8B%E5%92%8C.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/sum-of-distances-in-tree/">原题链接 834. 树中距离之和</a></p>
<hr>
<details> 
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumOfDistancesInTree</span><span class="params">(n <span class="type">int</span>, edges [][]<span class="type">int</span>)</span></span> (ans []<span class="type">int</span>) &#123;</span><br><span class="line">	ans = <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">	siz := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">	g := <span class="built_in">make</span>([][]<span class="type">int</span>, n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		g[i] = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++ &#123;</span><br><span class="line">		u, v := edges[i][<span class="number">0</span>], edges[i][<span class="number">1</span>]</span><br><span class="line">		g[u] = <span class="built_in">append</span>(g[u], v)</span><br><span class="line">		g[v] = <span class="built_in">append</span>(g[v], u)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> getsiz, dfs <span class="function"><span class="keyword">func</span><span class="params">(u, fa <span class="type">int</span>)</span></span></span><br><span class="line">	dep := <span class="number">0</span></span><br><span class="line">	getsiz = <span class="function"><span class="keyword">func</span><span class="params">(u, fa <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> _, v := <span class="keyword">range</span> g[u] &#123;</span><br><span class="line">			<span class="keyword">if</span> v != fa &#123;</span><br><span class="line">				dep++</span><br><span class="line">				getsiz(v, u)</span><br><span class="line">				siz[u] += siz[v]</span><br><span class="line">				dep--</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		siz[u]++</span><br><span class="line">		ans[<span class="number">0</span>] += dep</span><br><span class="line">	&#125;</span><br><span class="line">	getsiz(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">	dfs = <span class="function"><span class="keyword">func</span><span class="params">(u, fa <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> _, v := <span class="keyword">range</span> g[u] &#123;</span><br><span class="line">			<span class="keyword">if</span> v != fa &#123;</span><br><span class="line">				ans[v] = ans[u] + (n - siz[v]) - (siz[v])</span><br><span class="line">				dfs(v, u)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>24秋招</title>
    <url>/%E5%85%B6%E4%BB%96/24%E7%A7%8B%E6%8B%9B.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c72ea1307d94705987139ef37251b13514f90668e413fcbe3467b4c54fa6ed79"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode18.四数之和</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode18-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/4sum/">原题链接 18. 四数之和</a></p>
<hr>
<details> 
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> (ans [][]<span class="type">int</span>) &#123;</span><br><span class="line">	n := <span class="built_in">len</span>(nums)</span><br><span class="line">	cnt := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, n)</span><br><span class="line"></span><br><span class="line">	sort.Ints(nums)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		cnt[nums[i]]++</span><br><span class="line">	&#125;</span><br><span class="line">	used := <span class="built_in">make</span>(<span class="keyword">map</span>[[<span class="number">4</span>]<span class="type">int</span>]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; n; j++ &#123;</span><br><span class="line">			<span class="keyword">for</span> k := j + <span class="number">1</span>; k &lt; n; k++ &#123;</span><br><span class="line">				a, b, c := nums[i], nums[j], nums[k]</span><br><span class="line">				cnt[a]--</span><br><span class="line">				cnt[b]--</span><br><span class="line">				cnt[c]--</span><br><span class="line">				<span class="keyword">if</span> cnt[target-a-b-c] != <span class="number">0</span> &amp;&amp; target-a-b-c &gt;= c &#123;</span><br><span class="line">					tmp := [<span class="number">4</span>]<span class="type">int</span>&#123;a, b, c, target - a - b - c&#125;</span><br><span class="line">					<span class="keyword">if</span> used[tmp] == <span class="number">0</span> &#123;</span><br><span class="line">						ans = <span class="built_in">append</span>(ans, []<span class="type">int</span>&#123;a, b, c, target - a - b - c&#125;)</span><br><span class="line">						used[tmp] = <span class="number">1</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				cnt[a]++</span><br><span class="line">				cnt[b]++</span><br><span class="line">				cnt[c]++</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode979.在二叉树中分配硬币</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode979-%E5%9C%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%88%86%E9%85%8D%E7%A1%AC%E5%B8%81.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/distribute-coins-in-binary-tree/">原题链接 931. 下降路径最小和</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">distributeCoins</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	l, r := root.Left, root.Right</span><br><span class="line">	resl := distributeCoins(l)</span><br><span class="line">	resr := distributeCoins(r)</span><br><span class="line">	sum, cnt := get(root)</span><br><span class="line">	<span class="keyword">return</span> resl + resr + abs(sum-cnt)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(root *TreeNode)</span></span> (sum, cnt <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	l, r := root.Left, root.Right</span><br><span class="line">	suml, cntl := get(l)</span><br><span class="line">	sumr, cntr := get(r)</span><br><span class="line">	sum = root.Val + suml + sumr</span><br><span class="line">	cnt = <span class="number">1</span> + cntl + cntr</span><br><span class="line">	<span class="keyword">return</span> sum, cnt</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &gt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> -x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</detail>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode931.下降路径最小和</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode931-%E4%B8%8B%E9%99%8D%E8%B7%AF%E5%BE%84%E6%9C%80%E5%B0%8F%E5%92%8C.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/minimum-falling-path-sum/">原题链接 931. 下降路径最小和</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minFallingPathSum</span><span class="params">(matrix [][]<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	n := <span class="built_in">len</span>(matrix)</span><br><span class="line">	dp := <span class="built_in">make</span>([][]<span class="type">int</span>, n+<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= n; i++ &#123;</span><br><span class="line">		dp[i] = <span class="built_in">make</span>([]<span class="type">int</span>, n+<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt;= n; j++ &#123;</span><br><span class="line">			dp[i][j] = <span class="number">0x3f3f3f3f</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= n; i++ &#123;</span><br><span class="line">		dp[<span class="number">0</span>][i] = <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= n; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> j != <span class="number">1</span> &#123;</span><br><span class="line">				dp[i][j] = min(dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+matrix[i<span class="number">-1</span>][j<span class="number">-1</span>], dp[i][j])</span><br><span class="line">			&#125;</span><br><span class="line">			dp[i][j] = min(dp[i<span class="number">-1</span>][j]+matrix[i<span class="number">-1</span>][j<span class="number">-1</span>], dp[i][j])</span><br><span class="line">			<span class="keyword">if</span> j != n &#123;</span><br><span class="line">				dp[i][j] = min(dp[i<span class="number">-1</span>][j+<span class="number">1</span>]+matrix[i<span class="number">-1</span>][j<span class="number">-1</span>], dp[i][j])</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ans := <span class="number">0x3f3f3f3f</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">		ans = min(ans, dp[n][i])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">		<span class="keyword">return</span> y</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode2544.交替数字和</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode2544-%E4%BA%A4%E6%9B%BF%E6%95%B0%E5%AD%97%E5%92%8C.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/alternating-digit-sum">原题链接 2544. 交替数字和</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">alternateDigitSum</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	ans, f := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> n != <span class="number">0</span> &#123;</span><br><span class="line">		ans += f * (n % <span class="number">10</span>)</span><br><span class="line">		f *= <span class="number">-1</span></span><br><span class="line">		n /= <span class="number">10</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> -f * ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode1911.最大子序列交替和</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode1911-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97%E4%BA%A4%E6%9B%BF%E5%92%8C.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/maximum-alternating-subsequence-sum/">原题链接 1911. 最大子序列交替和</a></p>
<hr>
<details>
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxAlternatingSum</span><span class="params">(nums []<span class="type">int</span>)</span></span> (ans <span class="type">int64</span>) &#123;</span><br><span class="line">	maxx := <span class="type">int</span>(<span class="number">1e9</span> + <span class="number">7</span>)</span><br><span class="line">	ans = <span class="number">0</span></span><br><span class="line">	cur, nex := nums[<span class="number">0</span>], maxx</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> nex == maxx &amp;&amp; cur &lt; nums[i] &#123;</span><br><span class="line">			cur = nums[i]</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> nex &gt; nums[i] &#123;</span><br><span class="line">			nex = nums[i]</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			ans += <span class="type">int64</span>(cur - nex)</span><br><span class="line">			<span class="comment">// fmt.Println(cur,nex)</span></span><br><span class="line">			cur, nex = nums[i], maxx</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans + <span class="type">int64</span>(cur)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode16.最接近的三数之和</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode16-%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/3sum-closest">原题链接 16.最接近的三数之和</a></p>
<hr>
<details> 
    <summary>展开答案</summary>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSumClosest</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> ans, minn <span class="type">int</span> = <span class="number">1e9</span>, <span class="number">1e9</span></span><br><span class="line">	n := <span class="built_in">len</span>(nums)</span><br><span class="line">	sort.Ints(nums)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := i + <span class="number">2</span>; j &lt; n; j++ &#123;</span><br><span class="line">			l, r := i+<span class="number">1</span>, j<span class="number">-1</span></span><br><span class="line">			<span class="keyword">for</span> l &lt; r &#123;</span><br><span class="line">				m1 := (<span class="number">2</span>*l + r) / <span class="number">3</span></span><br><span class="line">				m2 := (l + <span class="number">2</span>*r + <span class="number">2</span>) / <span class="number">3</span> <span class="comment">// 上取整</span></span><br><span class="line">				res1 := abs(target - nums[i] - nums[j] - nums[m1])</span><br><span class="line">				res2 := abs(target - nums[i] - nums[j] - nums[m2])</span><br><span class="line">				<span class="keyword">if</span> res1 &lt; res2 &#123;</span><br><span class="line">					r = m2 - <span class="number">1</span></span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					l = m1 + <span class="number">1</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			res := abs(target - nums[i] - nums[j] - nums[r])</span><br><span class="line">			<span class="keyword">if</span> res &lt; minn &#123;</span><br><span class="line">				minn = res</span><br><span class="line">				ans = nums[i] + nums[j] + nums[r]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">		<span class="keyword">return</span> y</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &gt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> -x</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>]]></content>
      <categories>
        <category>刷题</category>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>计算机基础</category>
        <category>计算机网络</category>
        <category>目录</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机基础</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<h2 id="1-计算机网络"><a href="#1-计算机网络" class="headerlink" title="1. 计算机网络"></a>1. <strong><a href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html">计算机网络</a></strong></h2><h2 id="2-计算机网络"><a href="#2-计算机网络" class="headerlink" title="2. 计算机网络"></a>2. <strong><a href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html">计算机网络</a></strong></h2><h2 id="3-计算机网络"><a href="#3-计算机网络" class="headerlink" title="3. 计算机网络"></a>3. <strong><a href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html">计算机网络</a></strong></h2><span id="more"></span>
<h2 id="4-计算机网络"><a href="#4-计算机网络" class="headerlink" title="4. 计算机网络"></a>4. <strong><a href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html">计算机网络</a></strong></h2>]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题记录</title>
    <url>/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<p><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode16-%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html">leetcode16.最接近的三数之和</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode1911-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97%E4%BA%A4%E6%9B%BF%E5%92%8C.html">leetcode1911.最大子序列交替和</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode2544-%E4%BA%A4%E6%9B%BF%E6%95%B0%E5%AD%97%E5%92%8C.html">leetcode2544.交替数字和</a><span id="more"></span><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode931-%E4%B8%8B%E9%99%8D%E8%B7%AF%E5%BE%84%E6%9C%80%E5%B0%8F%E5%92%8C.html">leetcode931.下降路径最小和</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode979-%E5%9C%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%88%86%E9%85%8D%E7%A1%AC%E5%B8%81.html">leetcode979.在二叉树中分配硬币</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode18-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C.html">leetcode18.四数之和</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode834-%E6%A0%91%E4%B8%AD%E8%B7%9D%E7%A6%BB%E4%B9%8B%E5%92%8C.html">leetcode834.树中距离之和</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode415-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0.html">leetcode415.字符串相加</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode874-%E6%A8%A1%E6%8B%9F%E8%A1%8C%E8%B5%B0%E6%9C%BA%E5%99%A8%E4%BA%BA.html">leetcode874.模拟行走机器人</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode918-%E7%8E%AF%E5%BD%A2%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C.html">leetcode918.环形子数组的最大和</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode1499-%E6%BB%A1%E8%B6%B3%E4%B8%8D%E7%AD%89%E5%BC%8F%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC.html">leetcode1499.满足不等式的最大值</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode860-%E6%9F%A0%E6%AA%AC%E6%B0%B4%E6%89%BE%E9%9B%B6.html">leetcode860.柠檬水找零</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode42-%E6%8E%A5%E9%9B%A8%E6%B0%B4.html">leetcode42.接雨水</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode771-%E5%AE%9D%E7%9F%B3%E4%B8%8E%E7%9F%B3%E5%A4%B4.html">leetcode771.宝石与石头</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode2208-%E5%B0%86%E6%95%B0%E7%BB%84%E5%92%8C%E5%87%8F%E5%8D%8A%E7%9A%84%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0.html">leetcode2208.将数组和减半的最少操作次数</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode2569-%E6%9B%B4%E6%96%B0%E6%95%B0%E7%BB%84%E5%90%8E%E5%A4%84%E7%90%86%E6%B1%82%E5%92%8C%E6%9F%A5%E8%AF%A2.html">leetcode2569.更新数组后处理求和查询</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode946-%E9%AA%8C%E8%AF%81%E6%A0%88%E5%BA%8F%E5%88%97.html">leetcode946.验证栈序列</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode2790-%E9%95%BF%E5%BA%A6%E9%80%92%E5%A2%9E%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E7%9B%AE.html">leetcode2790.长度递增组的最大数目</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode2791-%E6%A0%91%E4%B8%AD%E5%8F%AF%E4%BB%A5%E5%BD%A2%E6%88%90%E5%9B%9E%E6%96%87%E7%9A%84%E8%B7%AF%E5%BE%84%E6%95%B0.html">leetcode2791.树中可以形成回文的路径数</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode2500-%E5%88%A0%E9%99%A4%E6%AF%8F%E8%A1%8C%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC.html">leetcode2500.删除每行中的最大值</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode2050-%E5%B9%B6%E8%A1%8C%E8%AF%BE%E7%A8%8BIII.html">leetcode2050.并行课程III</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode1851-%E5%8C%85%E5%90%AB%E6%AF%8F%E4%B8%AA%E6%9F%A5%E8%AF%A2%E7%9A%84%E6%9C%80%E5%B0%8F%E5%8C%BA%E9%97%B4.html">leetcode1851.包含每个查询的最小区间</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.html">leetcode141.环形链表</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html">leetcode142.环形链表II</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode143-%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8.html">leetcode143.重排链表</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode2681-%E8%8B%B1%E9%9B%84%E7%9A%84%E5%8A%9B%E9%87%8F.html">leetcode2681.英雄的力量</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode822-%E7%BF%BB%E8%BD%AC%E5%8D%A1%E7%89%87%E6%B8%B8%E6%88%8F.html">leetcode822.翻转卡片游戏</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode980-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84III.html">leetcode980.不同路径III</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.html">leetcode21.合并两个有序链表</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode6951-%E6%89%BE%E5%87%BA%E6%9C%80%E5%AE%89%E5%85%A8%E8%B7%AF%E5%BE%84.html">leetcode6951.找出最安全路径</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode6932-%E5%AD%90%E5%BA%8F%E5%88%97%E6%9C%80%E5%A4%A7%E4%BC%98%E9%9B%85%E5%BA%A6.html">leetcode6932.子序列最大优雅度</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html">leetcode24.两两交换链表中的节点</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/leetcode334-%E9%80%92%E5%A2%9E%E7%9A%84%E4%B8%89%E5%85%83%E5%AD%90%E5%BA%8F%E5%88%97.html">leetcode334.递增的三元子序列</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/codeforces1856A-Tales-of-a-Sort.html">codeforces1856A.Tales of a Sort</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/codeforces1856B-Good-Arrays.html">codeforces1856B.Good Arrays</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/codeforces1856C-To-Become-Max.html">codeforces185C.To Become Max</a><br><a href="/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/codeforces1856E1-PermuTree-easy-version.html">codeforces1856E1.PermuTree (easy version)</a></p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>其他</title>
    <url>/%E5%85%B6%E4%BB%96.html</url>
    <content><![CDATA[<p><a href="/%E5%85%B6%E4%BB%96/%E6%A8%A1%E6%9D%BF.html">模板</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>变量</title>
    <url>/%E8%AF%AD%E8%A8%80/shell/%E5%8F%98%E9%87%8F.html</url>
    <content><![CDATA[<h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a><strong>定义变量</strong></h2><p>定义变量，不需要加<code>$</code>符号，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name1=<span class="string">&#x27;catgok&#x27;</span>  <span class="comment"># 单引号定义字符串</span></span><br><span class="line">name2=<span class="string">&quot;catgok&quot;</span>  <span class="comment"># 双引号定义字符串</span></span><br><span class="line">name3=catgok    <span class="comment"># 也可以不加引号，同样表示字符串</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a><strong>使用变量</strong></h2><p>使用变量，需要加上<code>$</code>符号，或者<code>$&#123;&#125;</code>符号。花括号是可选的，主要为了帮助解释器识别变量边界。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=catgok</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出catgok</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span>  <span class="comment"># 输出catgok</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span>123  <span class="comment"># 输出catgok123</span></span><br></pre></td></tr></table></figure>

<h2 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a><strong>只读变量</strong></h2><p>使用<code>readonly</code>或者<code>declare</code>可以将变量变为只读。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=catgok</span><br><span class="line"><span class="built_in">readonly</span> name</span><br><span class="line"><span class="built_in">declare</span> -r name  <span class="comment"># 两种写法均可</span></span><br><span class="line">name=abc  <span class="comment"># 会报错，因为此时name只读</span></span><br></pre></td></tr></table></figure>

<h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a><strong>删除变量</strong></h2><p><code>unset</code>可以删除变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=catgok</span><br><span class="line"><span class="built_in">unset</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出空行</span></span><br></pre></td></tr></table></figure>

<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a><strong>变量类型</strong></h2><ol>
<li>自定义变量（局部变量）<blockquote>
<p>子进程不能访问的变量</p>
</blockquote>
</li>
<li>环境变量（全局变量）<blockquote>
<p>子进程可以访问的变量</p>
</blockquote>
</li>
</ol>
<p>自定义变量改成环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catgok@9e0ebfcd82d7:~$ name=catgok  <span class="comment"># 定义变量</span></span><br><span class="line">catgok@9e0ebfcd82d7:~$ <span class="built_in">export</span> name  <span class="comment"># 第一种方法</span></span><br><span class="line">catgok@9e0ebfcd82d7:~$ <span class="built_in">declare</span> -x name  <span class="comment"># 第二种方法</span></span><br></pre></td></tr></table></figure>
<p>环境变量改为自定义变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catgok@9e0ebfcd82d7:~$ <span class="built_in">export</span> name=catgok  <span class="comment"># 定义环境变量</span></span><br><span class="line">catgok@9e0ebfcd82d7:~$ <span class="built_in">declare</span> +x name  <span class="comment"># 改为自定义变量</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><strong>字符串</strong></h2><p>字符串可以用单引号，也可以用双引号，也可以不用引号。</p>
<h3 id="单引号与双引号的区别："><a href="#单引号与双引号的区别：" class="headerlink" title="单引号与双引号的区别："></a><strong>单引号与双引号的区别：</strong></h3><ul>
<li>单引号中的内容会<strong>原样输出</strong>，不会执行、不会取变量</li>
<li>双引号中的内容可以<strong>执行</strong>、可以<strong>取变量</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=catgok  <span class="comment"># 不用引号</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hello, $name \&quot;hh\&quot;&#x27;</span>  <span class="comment"># 单引号字符串，输出 hello, $name \&quot;hh\&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello, <span class="variable">$name</span> \&quot;hh\&quot;&quot;</span>  <span class="comment"># 双引号字符串，输出 hello, catgok &quot;hh&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a><strong>获取字符串长度</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot;catgok&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#name&#125;</span>  <span class="comment"># 输出3</span></span><br></pre></td></tr></table></figure>
<h3 id="提取子串"><a href="#提取子串" class="headerlink" title="提取子串"></a><strong>提取子串</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot;hello, catgok&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name:0:5&#125;</span>  <span class="comment"># 提取从0开始的5个字符</span></span><br></pre></td></tr></table></figure>

<hr>
<center>

<p><a href="/%E8%AF%AD%E8%A8%80/shell.html">返回目录</a></p>
</center>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>引入外部脚本</title>
    <url>/%E8%AF%AD%E8%A8%80/shell/%E5%BC%95%E5%85%A5%E5%A4%96%E9%83%A8%E8%84%9A%E6%9C%AC.html</url>
    <content><![CDATA[<p>类似于<code>C/C++</code>中的<code>include</code>操作，<code>bash</code>也可以引入其他文件中的代码。</p>
<span id="more"></span>
<p>语法格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">. filename  <span class="comment"># 注意点和文件名之间有一个空格</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> filename</span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h2><p>创建<code>test1.sh</code>，内容为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">name=catgok  <span class="comment"># 定义变量name</span></span><br></pre></td></tr></table></figure>
<p>然后创建test2.sh，内容为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> test1.sh <span class="comment"># 或 . test1.sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> My name is: <span class="variable">$name</span>  <span class="comment"># 可以使用test1.sh中的变量</span></span><br></pre></td></tr></table></figure>
<p>执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">catgok@9e0ebfcd82d7:~$ chmod +x test2.sh </span><br><span class="line">catgok@9e0ebfcd82d7:~$ ./test2.sh </span><br><span class="line">My name is: catgok</span><br></pre></td></tr></table></figure>

<hr>
<center>

<p><a href="/%E8%AF%AD%E8%A8%80/shell.html">返回目录</a></p>
</center>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>文件重定向</title>
    <url>/%E8%AF%AD%E8%A8%80/shell/%E6%96%87%E4%BB%B6%E9%87%8D%E5%AE%9A%E5%90%91.html</url>
    <content><![CDATA[<p>每个进程默认打开3个文件描述符：</p>
<blockquote>
<p><code>stdin</code>标准输入，从命令行读取数据，文件描述符为<code>0</code><br><code>stdout</code>标准输出，向命令行输出数据，文件描述符为<code>1</code><br><code>stderr</code>标准错误输出，向命令行输出数据，文件描述符为<code>2</code></p>
</blockquote>
<span id="more"></span>
<p>可以用文件重定向将这三个文件重定向到其他文件中。</p>
<h2 id="重定向命令列表"><a href="#重定向命令列表" class="headerlink" title="重定向命令列表"></a><strong>重定向命令列表</strong></h2><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>command &gt; file</code></td>
<td>将<code>stdout</code>重定向到file中</td>
</tr>
<tr>
<td><code>command &lt; file</code></td>
<td>将<code>stdin</code>重定向到file中</td>
</tr>
<tr>
<td><code>command &gt;&gt; file</code></td>
<td>将<code>stdout</code>以<strong>追加</strong>方式重定向到<code>file</code>中</td>
</tr>
<tr>
<td><code>command n&gt; file</code></td>
<td>将文件描述符<code>n</code>重定向到<code>file</code>中</td>
</tr>
<tr>
<td><code>command n&gt;&gt; file</code></td>
<td>将文件描述符<code>n</code>以<strong>追加</strong>方式重定向到<code>file</code>中</td>
</tr>
</tbody></table>
<h2 id="输入和输出重定向"><a href="#输入和输出重定向" class="headerlink" title="输入和输出重定向"></a><strong>输入和输出重定向</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hello \c&quot;</span> &gt; output.txt     <span class="comment"># 将stdout重定向到output.txt中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;World&quot;</span> &gt;&gt; output.txt          <span class="comment"># 将字符串追加到output.txt中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> str &lt; output.txt               <span class="comment"># 从output.txt中读取字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span>                           <span class="comment"># 输出结果：Hello World</span></span><br></pre></td></tr></table></figure>

<h2 id="同时重定向stdin和stdout"><a href="#同时重定向stdin和stdout" class="headerlink" title="同时重定向stdin和stdout"></a><strong>同时重定向stdin和stdout</strong></h2><p>创建bash脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> a</span><br><span class="line"><span class="built_in">read</span> b</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(<span class="built_in">expr</span> <span class="string">&quot;<span class="variable">$a</span>&quot;</span> + <span class="string">&quot;<span class="variable">$b</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>创建input.txt，里面的内容为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<p>执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catgok@9e0ebfcd82d7:~$ <span class="built_in">chmod</span> +x test.sh     <span class="comment"># 添加可执行权限</span></span><br><span class="line">catgok@9e0ebfcd82d7:~$ ./test.sh &lt; input.txt &gt; output.txt  <span class="comment"># 从input.txt中读取内容，将输出写入output.txt中</span></span><br><span class="line">catgok@9e0ebfcd82d7:~$ <span class="built_in">cat</span> output.txt       <span class="comment"># 查看output.txt中的内容</span></span><br><span class="line">7</span><br></pre></td></tr></table></figure>

<hr>
<center>

<p><a href="/%E8%AF%AD%E8%A8%80/shell.html">返回目录</a></p>
</center>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>exit命令</title>
    <url>/%E8%AF%AD%E8%A8%80/shell/exit%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<p><code>exit</code>命令用来退出当前<code>shell</code>进程，并返回一个退出状态；使用<code>$?</code>可以接收这个退出状态。<br><code>exit</code>命令可以接受一个整数值作为参数，代表退出状态。如果不指定，默认状态值是<code>0</code>。<br>exit退出状态只能是一个介于<code>0~255</code>之间的整数，其中只有<code>0</code>表示成功，其它值都表示失败。</p>
<span id="more"></span>
<p>示例</p>
<p>创建脚本<code>test.sh</code>，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 1 ]  <span class="comment"># 如果传入参数个数等于1，则正常退出；否则非正常退出。</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;arguments not valid&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;arguments valid&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>执行该脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">catgok@9e0ebfcd82d7:~$ chmod +x test.sh </span><br><span class="line">catgok@9e0ebfcd82d7:~$ ./test.sh 123</span><br><span class="line">arguments valid</span><br><span class="line">catgok@9e0ebfcd82d7:~$ echo $?  # 传入一个参数，则正常退出，exit code为0</span><br><span class="line">0</span><br><span class="line">catgok@9e0ebfcd82d7:~$ ./test.sh </span><br><span class="line">arguments not valid</span><br><span class="line">catgok@9e0ebfcd82d7:~$ echo $?  # 传入参数个数不是1，则非正常退出，exit code为1</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<hr>
<center>

<p><a href="/%E8%AF%AD%E8%A8%80/shell.html">返回目录</a></p>
</center>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>概论</title>
    <url>/%E8%AF%AD%E8%A8%80/shell/%E6%A6%82%E8%AE%BA.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><p>shell是我们通过命令行与操作系统沟通的语言。<br>shell脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。 </p>
<span id="more"></span>
<p>Linux中常见的shell脚本有很多种，常见的有：</p>
<ul>
<li>Bourne Shell(<code>/usr/bin/sh</code>或<code>/bin/sh</code>)</li>
<li>Bourne Again Shell(<code>/bin/bash</code>)</li>
<li>C Shell(<code>/usr/bin/csh</code>)</li>
<li>K Shell(<code>/usr/bin/ksh</code>)</li>
<li><a href="https://ohmyz.sh/">zsh</a></li>
</ul>
<p>Linux系统中一般默认使用bash，所以接下来讲解bash中的语法。<br>文件开头需要写<code>#! /bin/bash</code>，指明bash为脚本解释器。  </p>
<h2 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a><strong>运行方式</strong></h2><h3 id="作为可执行文件"><a href="#作为可执行文件" class="headerlink" title="作为可执行文件"></a><strong>作为可执行文件</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catgok@9e0ebfcd82d7:~$ <span class="built_in">chmod</span> +x test.sh  <span class="comment"># 使脚本具有可执行权限</span></span><br><span class="line">catgok@9e0ebfcd82d7:~$ ./test.sh  <span class="comment"># 当前路径下执行</span></span><br><span class="line">Hello World!  <span class="comment"># 脚本输出</span></span><br><span class="line">catgok@9e0ebfcd82d7:~$ /home/catgok/test.sh  <span class="comment"># 绝对路径下执行</span></span><br><span class="line">Hello World!  <span class="comment"># 脚本输出</span></span><br><span class="line">catgok@9e0ebfcd82d7:~$ ~/test.sh  <span class="comment"># 家目录路径下执行</span></span><br><span class="line">Hello World!  <span class="comment"># 脚本输出</span></span><br></pre></td></tr></table></figure>
<h3 id="用解释器执行"><a href="#用解释器执行" class="headerlink" title="用解释器执行"></a><strong>用解释器执行</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catgok@9e0ebfcd82d7:~$ bash test.sh</span><br><span class="line">Hello World!  <span class="comment"># 脚本输出</span></span><br></pre></td></tr></table></figure>

<hr>
<center>

<p><a href="/%E8%AF%AD%E8%A8%80/shell.html">返回目录</a></p>
</center>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>注释</title>
    <url>/%E8%AF%AD%E8%A8%80/shell/%E6%B3%A8%E9%87%8A.html</url>
    <content><![CDATA[<h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a><strong>单行注释</strong></h2><p>每行中<code>#</code>之后的内容均是注释。 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一行注释</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Hello World&#x27;</span>  <span class="comment">#`  这也是注释</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a><strong>多行注释</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">第一行注释</span></span><br><span class="line"><span class="string">第二行注释</span></span><br><span class="line"><span class="string">第三行注释</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>其中<code>EOF</code>可以换成其它任意字符串。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">abc</span></span><br><span class="line"><span class="string">第一行注释</span></span><br><span class="line"><span class="string">第二行注释</span></span><br><span class="line"><span class="string">第三行注释</span></span><br><span class="line"><span class="string">abc</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;<span class="string">x</span></span><br><span class="line"><span class="string">第一行注释</span></span><br><span class="line"><span class="string">第二行注释</span></span><br><span class="line"><span class="string">第三行注释</span></span><br><span class="line"><span class="string">x</span></span><br></pre></td></tr></table></figure>

<hr>
<center>

<p><a href="/%E8%AF%AD%E8%A8%80/shell.html">返回目录</a></p>
</center>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>默认变量</title>
    <url>/%E8%AF%AD%E8%A8%80/shell/%E9%BB%98%E8%AE%A4%E5%8F%98%E9%87%8F.html</url>
    <content><![CDATA[<h2 id="文件参数变量"><a href="#文件参数变量" class="headerlink" title="文件参数变量"></a><strong>文件参数变量</strong></h2><p>在执行shell脚本时，可以向脚本传递参数。<code>$1</code>是第一个参数，<code>$2</code>是第二个参数，以此类推。特殊的，<code>$0</code>是文件名（包含路径）。例如(文件名为<code>test.sh</code>):</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件名：&quot;</span><span class="variable">$0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数：&quot;</span><span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数：&quot;</span><span class="variable">$2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个参数：&quot;</span><span class="variable">$3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第四个参数：&quot;</span><span class="variable">$4</span></span><br></pre></td></tr></table></figure>
<p>执行该脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catgok@9e0ebfcd82d7:~$ <span class="built_in">chmod</span> +x test.sh </span><br><span class="line">catgok@9e0ebfcd82d7:~$ ./test.sh 1 2 3 4</span><br><span class="line">文件名：./test.sh</span><br><span class="line">第一个参数：1</span><br><span class="line">第二个参数：2</span><br><span class="line">第三个参数：3</span><br><span class="line">第四个参数：4</span><br></pre></td></tr></table></figure>

<h2 id="其它参数相关变量"><a href="#其它参数相关变量" class="headerlink" title="其它参数相关变量"></a><strong>其它参数相关变量</strong></h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>$#</code></td>
<td>代表文件传入的<strong>参数个数</strong>，如上例中值为4</td>
</tr>
<tr>
<td><code>$*</code></td>
<td>由<strong>所有参数</strong>构成的用空格隔开的字符串，如上例中值为<code>&quot;$1 $2 $3 $4&quot;</code></td>
</tr>
<tr>
<td><code>$@</code></td>
<td><strong>每个参数</strong>分别用双引号括起来的字符串，如上例中值为<code>&quot;$1&quot; &quot;$2&quot; &quot;$3&quot; &quot;$4&quot;</code></td>
</tr>
<tr>
<td><code>$$</code></td>
<td>脚本当前运行的<strong>进程ID</strong></td>
</tr>
<tr>
<td><code>$?</code></td>
<td>上一条命令的退出状态(注意不是stdout，而是<strong>exit code</strong>)。0表示正常退出，其他值表示错误</td>
</tr>
<tr>
<td><code>$(command)</code></td>
<td>返回<code>command</code>这条命令的stdout(<strong>可嵌套</strong>)</td>
</tr>
<tr>
<td>`command`</td>
<td>返回<code>command</code>这条命令的stdout(<strong>不可嵌套</strong>)</td>
</tr>
</tbody></table>
<hr>
<center>

<p><a href="/%E8%AF%AD%E8%A8%80/shell.html">返回目录</a></p>
</center>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/%E8%AF%AD%E8%A8%80/shell/%E6%95%B0%E7%BB%84.html</url>
    <content><![CDATA[<p>数组中可以存放多个不同类型的值，只支持一维数组，初始化时不需要指明数组大小。数组<strong>下标从0开始</strong>。</p>
<span id="more"></span>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h2><p>数组用小括号表示，元素之间用空格隔开。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array=(1 abc <span class="string">&quot;def&quot;</span> catgok)</span><br></pre></td></tr></table></figure>
<p>也可以直接定义数组中某个元素的值：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array[0]=1</span><br><span class="line">array[1]=abc</span><br><span class="line">array[2]=<span class="string">&quot;def&quot;</span></span><br><span class="line">array[3]=catgok</span><br></pre></td></tr></table></figure>

<h2 id="读取数组中某个元素的值"><a href="#读取数组中某个元素的值" class="headerlink" title="读取数组中某个元素的值"></a><strong>读取数组中某个元素的值</strong></h2><p>格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;array[index]&#125;</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array=(1 abc <span class="string">&quot;def&quot;</span> catgok)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[0]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[1]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[2]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[3]&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="读取整个数组"><a href="#读取整个数组" class="headerlink" title="读取整个数组"></a><strong>读取整个数组</strong></h2><p>格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;array[@]&#125;</span>  <span class="comment"># 第一种写法</span></span><br><span class="line"><span class="variable">$&#123;array[*]&#125;</span>  <span class="comment"># 第二种写法</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array=(1 abc <span class="string">&quot;def&quot;</span> catgok)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[@]&#125;</span>  <span class="comment"># 第一种写法</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[*]&#125;</span>  <span class="comment"># 第二种写法</span></span><br></pre></td></tr></table></figure>

<h2 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a><strong>数组长度</strong></h2><p>类似于字符串</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;#array[@]&#125;</span>  <span class="comment"># 第一种写法</span></span><br><span class="line"><span class="variable">$&#123;#array[*]&#125;</span>  <span class="comment"># 第二种写法</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array=(1 abc <span class="string">&quot;def&quot;</span> catgok)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[@]&#125;</span>  <span class="comment"># 第一种写法</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[*]&#125;</span>  <span class="comment"># 第二种写法</span></span><br></pre></td></tr></table></figure>

<hr>
<center>

<p><a href="/%E8%AF%AD%E8%A8%80/shell.html">返回目录</a></p>
</center>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>expr命令</title>
    <url>/%E8%AF%AD%E8%A8%80/shell/expr%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<p><code>expr</code>命令用于求表达式的值</p>
<span id="more"></span>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a><strong>命令格式</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">expr</span> 表达式</span><br></pre></td></tr></table></figure>

<p>表达式说明：</p>
<ul>
<li>用空格隔开每一项</li>
<li>用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可以试试转义）</li>
<li>对包含空格和其他特殊字符的字符串要用引号括起来</li>
<li><code>expr</code>会在<code>stdout</code>中输出结果。如果为逻辑关系表达式，则结果为真时，<code>stdout</code>输出1，否则输出0。</li>
<li><code>expr</code>的<code>exit code</code>：如果为逻辑关系表达式，则结果为真时，<code>exit code</code>为0，否则为1。</li>
</ul>
<h2 id="字符串表达式"><a href="#字符串表达式" class="headerlink" title="字符串表达式"></a><strong>字符串表达式</strong></h2><ul>
<li><code>length STRING</code> <blockquote>
<p>返回STRING的长度</p>
</blockquote>
</li>
<li><code>index STRING CHARSET</code><blockquote>
<p><code>CHARSET</code>中任意单个字符在<code>STRING</code>中最前面的字符位置，<strong>下标从1开始</strong>。如果在<code>STRING</code>中完全不存在<code>CHARSET</code>中的字符，则返回0。</p>
</blockquote>
</li>
<li><code>substr STRING POSITION LENGTH</code><blockquote>
<p>返回<code>STRING</code>字符串中从<code>POSITION</code>开始，长度最大为<code>LENGTH</code>的子串。如果<code>POSITION</code>或<code>LENGTH</code>为负数，0或非数值，则返回空字符串。</p>
</blockquote>
</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str=<span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> length <span class="string">&quot;<span class="variable">$str</span>&quot;</span>`       <span class="comment"># ``不是单引号，表示执行该命令，输出12</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> index <span class="string">&quot;<span class="variable">$str</span>&quot;</span> aWd`    <span class="comment"># 输出7，下标从1开始</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> substr <span class="string">&quot;<span class="variable">$str</span>&quot;</span> 2 3`   <span class="comment"># 输出 ell</span></span><br></pre></td></tr></table></figure>

<h2 id="整数表达式"><a href="#整数表达式" class="headerlink" title="整数表达式"></a><strong>整数表达式</strong></h2><p>expr支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。</p>
<ul>
<li><code>+ -</code> 加减运算。两端参数会转换为整数，如果转换失败则报错。</li>
<li><code>* / %</code> 乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</li>
<li><code>()</code> 可以改变优先级，但需要用反斜杠转义<br>示例：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> + <span class="variable">$b</span>`     <span class="comment"># 输出7</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> - <span class="variable">$b</span>`     <span class="comment"># 输出-1</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \* <span class="variable">$b</span>`    <span class="comment"># 输出12，*需要转义</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> / <span class="variable">$b</span>`     <span class="comment"># 输出0，整除</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> % <span class="variable">$b</span>`     <span class="comment"># 输出3</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> \( <span class="variable">$a</span> + 1 \) \* \( <span class="variable">$b</span> + 1 \)`  <span class="comment"># 输出20，值为(a + 1) * (b + 1)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="逻辑关系表达式"><a href="#逻辑关系表达式" class="headerlink" title="逻辑关系表达式"></a><strong>逻辑关系表达式</strong></h2><ul>
<li><code>|</code><blockquote>
<p>如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数。</p>
</blockquote>
</li>
<li><code>&amp;</code><blockquote>
<p>如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</p>
</blockquote>
</li>
<li><code>&lt; &lt;= = == != &gt;= &gt;</code><blockquote>
<p>比较两端的参数，如果为true，则返回1，否则返回0。”&#x3D;&#x3D;”是”&#x3D;”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</p>
</blockquote>
</li>
<li><code>()</code><blockquote>
<p>可以改变优先级，但需要用反斜杠转义</p>
</blockquote>
</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \&gt; <span class="variable">$b</span>`    <span class="comment"># 输出0，&gt;需要转义</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> <span class="string">&#x27;&lt;&#x27;</span> <span class="variable">$b</span>`   <span class="comment"># 输出1，也可以将特殊字符用引号引起来</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> <span class="string">&#x27;&gt;=&#x27;</span> <span class="variable">$b</span>`  <span class="comment"># 输出0</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \&lt;\= <span class="variable">$b</span>`  <span class="comment"># 输出1</span></span><br><span class="line"></span><br><span class="line">c=0</span><br><span class="line">d=5</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$c</span> \&amp; <span class="variable">$d</span>`  <span class="comment"># 输出0</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \&amp; <span class="variable">$b</span>`  <span class="comment"># 输出3</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$c</span> \| <span class="variable">$d</span>`  <span class="comment"># 输出5</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \| <span class="variable">$b</span>`  <span class="comment"># 输出3</span></span><br></pre></td></tr></table></figure>

<hr>
<center>

<p><a href="/%E8%AF%AD%E8%A8%80/shell.html">返回目录</a></p>
</center>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>read命令</title>
    <url>/%E8%AF%AD%E8%A8%80/shell/read%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<p><code>read</code>命令用于从标准输入中读取单行数据。当读到文件结束符时，<code>exit code</code>为1，否则为0。</p>
<span id="more"></span>
<p>参数说明</p>
<ul>
<li>-p: 后面可以接提示信息</li>
<li>-t：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令</li>
</ul>
<p>示例:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catgok@9e0ebfcd82d7:~$ <span class="built_in">read</span> name    <span class="comment"># 读入name的值</span></span><br><span class="line">catgok  <span class="comment"># 标准输入</span></span><br><span class="line">catgok@9e0ebfcd82d7:~$ <span class="built_in">echo</span> <span class="variable">$name</span>   <span class="comment"># 输出name的值</span></span><br><span class="line">catgok  <span class="comment"># 标准输出</span></span><br><span class="line">catgok@9e0ebfcd82d7:~$ <span class="built_in">read</span> -p <span class="string">&quot;Please input your name: &quot;</span> -t 30 name    <span class="comment"># 读入name的值，等待时间30秒</span></span><br><span class="line">Please input your name:  catgok     <span class="comment"># 标准输入</span></span><br><span class="line">catgok@9e0ebfcd82d7:~$ <span class="built_in">echo</span> <span class="variable">$name</span>   <span class="comment"># 输出name的值</span></span><br><span class="line">catgok  <span class="comment"># 标准输出</span></span><br></pre></td></tr></table></figure>

<hr>
<center>

<p><a href="/%E8%AF%AD%E8%A8%80/shell.html">返回目录</a></p>
</center>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>echo命令</title>
    <url>/%E8%AF%AD%E8%A8%80/shell/echo%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<p><code>echo</code>用于输出字符串。</p>
<span id="more"></span>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a><strong>命令格式</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> STRING</span><br></pre></td></tr></table></figure>

<h2 id="显示普通字符串"><a href="#显示普通字符串" class="headerlink" title="显示普通字符串"></a><strong>显示普通字符串</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello Terminal&quot;</span></span><br><span class="line"><span class="built_in">echo</span> Hello Terminal <span class="comment"># 引号可以省略</span></span><br></pre></td></tr></table></figure>

<h2 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符"></a><strong>显示转义字符</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\&quot;Hello Terminal\&quot;&quot;</span>  <span class="comment"># 注意只能使用双引号，如果使用单引号，则不转义</span></span><br><span class="line"><span class="built_in">echo</span> \&quot;Hello Terminal\&quot;  <span class="comment"># 也可以省略双引号</span></span><br></pre></td></tr></table></figure>

<h2 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量"></a><strong>显示变量</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=catgok</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;My name is <span class="variable">$name</span>&quot;</span>  <span class="comment"># 输出 My name is catgok</span></span><br></pre></td></tr></table></figure>

<h2 id="显示换行"><a href="#显示换行" class="headerlink" title="显示换行"></a><strong>显示换行</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hi\n&quot;</span>  <span class="comment"># -e 开启转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;catgok&quot;</span></span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hi</span><br><span class="line"></span><br><span class="line">catgok</span><br></pre></td></tr></table></figure>

<h2 id="显示不换行"><a href="#显示不换行" class="headerlink" title="显示不换行"></a><strong>显示不换行</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hi \c&quot;</span> <span class="comment"># -e 开启转义 \c 不换行</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;catgok&quot;</span></span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hi catgok</span><br></pre></td></tr></table></figure>

<h2 id="显示结果定向至文件"><a href="#显示结果定向至文件" class="headerlink" title="显示结果定向至文件"></a><strong>显示结果定向至文件</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> &gt; output.txt  <span class="comment"># 将内容以覆盖的方式输出到output.txt中</span></span><br></pre></td></tr></table></figure>

<h2 id="原样输出字符串，不进行转义或取变量-用单引号"><a href="#原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="原样输出字符串，不进行转义或取变量(用单引号)"></a><strong>原样输出字符串，不进行转义或取变量(用单引号)</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=catgok</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$name\&quot;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span>\&quot;</span><br></pre></td></tr></table></figure>

<h2 id="显示命令的执行结果"><a href="#显示命令的执行结果" class="headerlink" title="显示命令的执行结果"></a><strong>显示命令的执行结果</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> `<span class="built_in">date</span>`</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Wed Sep 1 11:45:33 CST 2021</span><br></pre></td></tr></table></figure>

<hr>
<center>

<p><a href="/%E8%AF%AD%E8%A8%80/shell.html">返回目录</a></p>
</center>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>printf命令</title>
    <url>/%E8%AF%AD%E8%A8%80/shell/printf%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<p><code>printf</code>命令用于格式化输出，类似于<code>C/C++</code>中的<code>printf</code>函数。</p>
<span id="more"></span>
<p>默认不会在字符串末尾添加换行符。</p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a><strong>命令格式</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> format-string [arguments...]</span><br></pre></td></tr></table></figure>

<h2 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a><strong>用法示例</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%10d.\n&quot;</span> 123                <span class="comment"># 占10位，右对齐</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10.2f.\n&quot;</span> 123.123321      <span class="comment"># 占10位，保留2位小数，左对齐</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;My name is %s\n&quot;</span> <span class="string">&quot;catgok&quot;</span>   <span class="comment"># 格式化输出字符串</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%d * %d = %d\n&quot;</span>  2 3 `<span class="built_in">expr</span> 2 \* 3`  <span class="comment"># 表达式的值作为参数</span></span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">       123.</span><br><span class="line">123.12    .</span><br><span class="line">My name is catgok</span><br><span class="line">2 * 3 = 6</span><br></pre></td></tr></table></figure>

<hr>
<center>

<p><a href="/%E8%AF%AD%E8%A8%80/shell.html">返回目录</a></p>
</center>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>test命令与判断符号</title>
    <url>/%E8%AF%AD%E8%A8%80/shell/test%E5%91%BD%E4%BB%A4%E4%B8%8E%E5%88%A4%E6%96%AD%E7%AC%A6%E5%8F%B7.html</url>
    <content><![CDATA[<h2 id="逻辑运算符-amp-amp-和"><a href="#逻辑运算符-amp-amp-和" class="headerlink" title="逻辑运算符&amp;&amp;和||"></a><strong>逻辑运算符&amp;&amp;和||</strong></h2><ul>
<li><code>&amp;&amp;</code> 表示与，<code>||</code> 表示或</li>
<li>二者具有短路原则：<ul>
<li><code>expr1 &amp;&amp; expr2</code>：当expr1为假时，直接忽略expr2</li>
<li><code>expr1 || expr2</code>：当expr1为真时，直接忽略expr2</li>
</ul>
</li>
<li>表达式的<code>exit code</code>为0，表示真；为非零，表示假。（与C&#x2F;C++中的定义<strong>相反</strong>）<span id="more"></span></li>
</ul>
<h2 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a><strong>test命令</strong></h2><p>在命令行中输入<code>man test</code>，可以查看<code>test</code>命令的用法。<br><code>test</code>命令用于判断文件类型，以及对变量做比较。<br><code>test</code>命令用<code>exit code</code>返回结果，而不是使用<code>stdout</code>。0表示真，非0表示假。</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span> 2 -lt 3    <span class="comment"># 为真，返回值为0</span></span><br><span class="line"><span class="built_in">echo</span> $?         <span class="comment"># 输出上个命令的返回值，输出0</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catgok@9e0ebfcd82d7:~$ <span class="built_in">ls</span>  <span class="comment"># 列出当前目录下的所有文件</span></span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line">catgok@9e0ebfcd82d7:~$ <span class="built_in">test</span> -e test.sh &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span><br><span class="line">exist       <span class="comment"># test.sh 文件存在</span></span><br><span class="line">catgok@9e0ebfcd82d7:~$ <span class="built_in">test</span> -e test2.sh &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span><br><span class="line">Not exist   <span class="comment"># testh2.sh 文件不存在</span></span><br></pre></td></tr></table></figure>

<h3 id="文件类型判断"><a href="#文件类型判断" class="headerlink" title="文件类型判断"></a><strong>文件类型判断</strong></h3><p>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span> -e filename  <span class="comment"># 判断文件是否存在</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>代表意义</th>
</tr>
</thead>
<tbody><tr>
<td><code>-e</code></td>
<td>文件是否存在</td>
</tr>
<tr>
<td><code>-f</code></td>
<td>是否为文件</td>
</tr>
<tr>
<td><code>-d</code></td>
<td>是否为目录</td>
</tr>
</tbody></table>
<h3 id="文件权限判断"><a href="#文件权限判断" class="headerlink" title="文件权限判断"></a><strong>文件权限判断</strong></h3><p>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span> -r filename  <span class="comment"># 判断文件是否可读</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>代表意义</th>
</tr>
</thead>
<tbody><tr>
<td><code>-r</code></td>
<td>文件是否可读</td>
</tr>
<tr>
<td><code>-w</code></td>
<td>文件是否可写</td>
</tr>
<tr>
<td><code>-x</code></td>
<td>文件是否可执行</td>
</tr>
<tr>
<td><code>-s</code></td>
<td>是否为非空文件</td>
</tr>
</tbody></table>
<h3 id="整数间的比较"><a href="#整数间的比较" class="headerlink" title="整数间的比较"></a><strong>整数间的比较</strong></h3><p>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span> <span class="variable">$a</span> -eq <span class="variable">$b</span>  <span class="comment"># a是否等于b</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>代表意义</th>
</tr>
</thead>
<tbody><tr>
<td><code>-eq</code></td>
<td>a是否等于b</td>
</tr>
<tr>
<td><code>-ne</code></td>
<td>a是否不等于b</td>
</tr>
<tr>
<td><code>-gt</code></td>
<td>a是否大于b</td>
</tr>
<tr>
<td><code>-lt</code></td>
<td>a是否小于b</td>
</tr>
<tr>
<td><code>-ge</code></td>
<td>a是否大于等于b</td>
</tr>
<tr>
<td><code>-le</code></td>
<td>a是否小于等于b</td>
</tr>
</tbody></table>
<h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a><strong>字符串比较</strong></h3><table>
<thead>
<tr>
<th>参数</th>
<th>代表意义</th>
</tr>
</thead>
<tbody><tr>
<td><code>test -z STRING</code></td>
<td>判断STRING是否为空，如果为空，则返回true</td>
</tr>
<tr>
<td><code>test -n STRING</code></td>
<td>判断STRING是否非空，如果非空，则返回true（-n可以省略）</td>
</tr>
<tr>
<td><code>test str1 == str2</code></td>
<td>判断str1是否等于str2</td>
</tr>
<tr>
<td><code>test str1 != str2</code></td>
<td>判断str1是否不等于str2</td>
</tr>
</tbody></table>
<h3 id="多重条件判定"><a href="#多重条件判定" class="headerlink" title="多重条件判定"></a><strong>多重条件判定</strong></h3><p>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span> -r filename -a -x filename</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>代表意义</th>
</tr>
</thead>
<tbody><tr>
<td><code>-a</code></td>
<td>两条件是否同时成立</td>
</tr>
<tr>
<td><code>-o</code></td>
<td>两条件是否至少一个成立</td>
</tr>
<tr>
<td><code>!</code></td>
<td>取反。如 test ! -x file，当file不可执行时，返回true</td>
</tr>
</tbody></table>
<h2 id="判断符号"><a href="#判断符号" class="headerlink" title="判断符号[]"></a><strong>判断符号[]</strong></h2><p><code>[]</code>与<code>test</code>用法几乎一模一样，更常用于<code>if</code>语句中。另外<code>[[]]</code>是<code>[]</code>的加强版，支持的特性更多。<br>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ 2 -lt 3 ]  <span class="comment"># 为真，返回值为0</span></span><br><span class="line"><span class="built_in">echo</span> $?  <span class="comment"># 输出上个命令的返回值，输出0</span></span><br><span class="line">catgok@9e0ebfcd82d7:~$ <span class="built_in">ls</span>  <span class="comment"># 列出当前目录下的所有文件</span></span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line">catgok@9e0ebfcd82d7:~$ [ -e test.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span><br><span class="line">exist  <span class="comment"># test.sh 文件存在</span></span><br><span class="line">catgok@9e0ebfcd82d7:~$ [ -e test2.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span><br><span class="line">Not exist  <span class="comment"># testh2.sh 文件不存在</span></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li><code>[]</code>内的每一项都要用空格隔开</li>
<li>中括号内的变量，最好用双引号括起来</li>
<li>中括号内的常数，最好用单或双引号括起来</li>
</ul>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot;catgok 123&quot;</span></span><br><span class="line">[ <span class="variable">$name</span> == <span class="string">&quot;catgok 123&quot;</span> ]  <span class="comment"># 错误，等价于 [ catgok 123 == &quot;catgok 123&quot; ]，参数太多</span></span><br><span class="line">[ <span class="string">&quot;<span class="variable">$name</span>&quot;</span> == <span class="string">&quot;catgok&quot;</span> ]  <span class="comment"># 正确</span></span><br></pre></td></tr></table></figure>

<hr>
<center>

<p><a href="/%E8%AF%AD%E8%A8%80/shell.html">返回目录</a></p>
</center>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>判断语句</title>
    <url>/%E8%AF%AD%E8%A8%80/shell/%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5.html</url>
    <content><![CDATA[<h2 id="if…then形式"><a href="#if…then形式" class="headerlink" title="if…then形式"></a><strong>if…then形式</strong></h2><p>类似于<code>C/C++</code>中的<code>if-else</code>语句。</p>
<span id="more"></span>

<h2 id="单层if"><a href="#单层if" class="headerlink" title="单层if"></a><strong>单层if</strong></h2><p>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$a</span>&quot;</span> -lt <span class="string">&quot;<span class="variable">$b</span>&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$a</span>&quot;</span> -gt 2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>在范围内</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3在范围内</span><br></pre></td></tr></table></figure>

<h2 id="单层if-else"><a href="#单层if-else" class="headerlink" title="单层if-else"></a><strong>单层if-else</strong></h2><p>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! [ <span class="string">&quot;<span class="variable">$a</span>&quot;</span> -lt <span class="string">&quot;<span class="variable">$b</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>不小于<span class="variable">$&#123;b&#125;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>小于<span class="variable">$&#123;b&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3小于4</span><br></pre></td></tr></table></figure>

<h2 id="多层if-elif-elif-else"><a href="#多层if-elif-elif-else" class="headerlink" title="多层if-elif-elif-else"></a><strong>多层if-elif-elif-else</strong></h2><p>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">elif</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">elif</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -eq 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于1</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -eq 2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于2</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -eq 3 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于3</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> 其他</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其他</span><br></pre></td></tr></table></figure>

<h2 id="case…esac形式"><a href="#case…esac形式" class="headerlink" title="case…esac形式"></a><strong>case…esac形式</strong></h2><p>类似于<code>C/C++</code>中的<code>switch</code>语句。<br>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> $变量名称 <span class="keyword">in</span></span><br><span class="line">    值1)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;  <span class="comment"># 类似于C/C++中的break</span></span><br><span class="line">    值2)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line">    *)  <span class="comment"># 类似于C/C++中的default</span></span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=4</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$a</span> <span class="keyword">in</span></span><br><span class="line">    1)</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于1</span><br><span class="line">        ;;  </span><br><span class="line">    2)</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于2</span><br><span class="line">        ;;  </span><br><span class="line">    3)                                                </span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>等于3</span><br><span class="line">        ;;  </span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> 其他</span><br><span class="line">        ;;  </span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其他</span><br></pre></td></tr></table></figure>

<hr>
<center>

<p><a href="/%E8%AF%AD%E8%A8%80/shell.html">返回目录</a></p>
</center>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>循环语句</title>
    <url>/%E8%AF%AD%E8%A8%80/shell/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5.html</url>
    <content><![CDATA[<h2 id="for…in…do…done"><a href="#for…in…do…done" class="headerlink" title="for…in…do…done"></a><strong>for…in…do…done</strong></h2><p>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> val1 val2 val3</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>示例1，输出<code>a 2 cc</code>，每个元素一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a 2 cc</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>示例2，输出当前路径下的所有文件名，每个文件名一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `<span class="built_in">ls</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$file</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>示例3，输出<code>1-10</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 10)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>示例4，使用<code>&#123;1..10&#125;</code> 或者 <code>&#123;a..z&#125;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;a..z&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="for-…-…-…-do…done"><a href="#for-…-…-…-do…done" class="headerlink" title="for ((…;…;…)) do…done"></a><strong>for ((…;…;…)) do…done</strong></h2><p>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ((expression; condition; expression))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>示例，输出<code>1-10</code>，每个数占一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="while…do…done循环"><a href="#while…do…done循环" class="headerlink" title="while…do…done循环"></a><strong>while…do…done循环</strong></h2><p>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>示例，文件结束符为<code>Ctrl+d</code>，输入文件结束符后<code>read</code>指令返回false。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> name</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="until…do…done循环"><a href="#until…do…done循环" class="headerlink" title="until…do…done循环"></a><strong>until…do…done循环</strong></h2><p>当条件为真时结束<br>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">until</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>示例，当用户输入<code>yes</code>或者<code>YES</code>时结束，否则一直等待读入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">until</span> [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> == <span class="string">&quot;yes&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> == <span class="string">&quot;YES&quot;</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;Please input yes/YES to stop this program: &quot;</span> word</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="break命令"><a href="#break命令" class="headerlink" title="break命令"></a><strong>break命令</strong></h2><p>跳出当前一层循环，注意与<code>C/C++</code>不同的是，<code>break</code>不能跳出<code>case</code>语句。<br>示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> name</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">case</span> <span class="variable">$i</span> <span class="keyword">in</span></span><br><span class="line">            8)</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">                ;;</span><br><span class="line">            *)</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">                ;;</span><br><span class="line">        <span class="keyword">esac</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>该示例每读入非EOF的字符串，会输出一遍1-7。<br>该程序可以输入<code>Ctrl+d</code>文件结束符来结束，也可以直接用<code>Ctrl+c</code>杀掉该进程。</p>
<h2 id="continue命令"><a href="#continue命令" class="headerlink" title="continue命令"></a><strong>continue命令</strong></h2><p>跳出当前循环。<br>示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ `<span class="built_in">expr</span> <span class="variable">$i</span> % 2` -eq 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>该程序输出<code>1-10</code>中的所有奇数。</p>
<h2 id="死循环的处理方式"><a href="#死循环的处理方式" class="headerlink" title="死循环的处理方式"></a><strong>死循环的处理方式</strong></h2><ul>
<li>如果可以打开该程序，则输入<code>Ctrl+c</code>即可。</li>
<li>否则可以直接关闭进程<blockquote>
<p>使用<code>top</code>命令找到进程的PID<br>  输入<code>kill -9 PID</code>即可关掉此进程</p>
</blockquote>
</li>
</ul>
<hr>
<center>

<p><a href="/%E8%AF%AD%E8%A8%80/shell.html">返回目录</a></p>
</center>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>函数</title>
    <url>/%E8%AF%AD%E8%A8%80/shell/%E5%87%BD%E6%95%B0.html</url>
    <content><![CDATA[<p><code>bash</code>中的函数类似于<code>C/C++</code>中的函数，但<code>return</code>的返回值与<code>C/C++</code>不同，返回的是<code>exit code</code>，取值为<code>0-255</code>，<code>0</code>表示正常结束。</p>
<blockquote>
<p>如果想获取函数的输出结果，可以通过<code>echo</code>输出到<code>stdout</code>中，然后通过<code>$(function_name)</code>来获取<code>stdout</code>中的结果。</p>
</blockquote>
<p>函数的<code>return</code>值可以通过<code>$?</code>来获取。</p>
<span id="more"></span>
<p>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">function</span>] <span class="function"><span class="title">func_name</span></span>() &#123;  <span class="comment"># function关键字可以省略</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="不获取-return值和stdout值"><a href="#不获取-return值和stdout值" class="headerlink" title="不获取 return值和stdout值"></a><strong>不获取 return值和stdout值</strong></h2><p>示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">    name=catgok</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$name</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">func</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello catgok</span><br></pre></td></tr></table></figure>

<h2 id="获取-return值和stdout值"><a href="#获取-return值和stdout值" class="headerlink" title="获取 return值和stdout值"></a><strong>获取 return值和stdout值</strong></h2><p>不写<code>return</code>时，默认<code>return 0</code>。</p>
<p>示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">    name=catgok</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$name</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output=$(func)</span><br><span class="line">ret=$?</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;output = <span class="variable">$output</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;return = <span class="variable">$ret</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">output = Hello catgok</span><br><span class="line">return = 123</span><br></pre></td></tr></table></figure>

<h2 id="函数的输入参数"><a href="#函数的输入参数" class="headerlink" title="函数的输入参数"></a><strong>函数的输入参数</strong></h2><p>在函数内，<code>$1</code>表示第一个输入参数，<code>$2</code>表示第二个输入参数，依此类推。    </p>
<blockquote>
<p><strong>注意：函数内的<code>$0</code>仍然是文件名，而不是函数名。</strong></p>
</blockquote>
<p>示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">func</span></span>() &#123;  <span class="comment"># 递归计算 $1 + ($1 - 1) + ($1 - 2) + ... + 0</span></span><br><span class="line">    word=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> != <span class="string">&#x27;y&#x27;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> != <span class="string">&#x27;n&#x27;</span> ]</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">read</span> -p <span class="string">&quot;要进入func(<span class="variable">$1</span>)函数吗？请输入y/n：&quot;</span> word</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$word</span>&quot;</span> == <span class="string">&#x27;n&#x27;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> 0</span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$1</span> -le 0 ] </span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> 0</span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">sum</span>=$(func $(<span class="built_in">expr</span> <span class="variable">$1</span> - 1))</span><br><span class="line">    <span class="built_in">echo</span> $(<span class="built_in">expr</span> <span class="variable">$sum</span> + <span class="variable">$1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(func 10)</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">55</span><br></pre></td></tr></table></figure>

<h2 id="函数内的局部变量"><a href="#函数内的局部变量" class="headerlink" title="函数内的局部变量"></a><strong>函数内的局部变量</strong></h2><p>可以在函数内定义局部变量，作用范围仅在当前函数内。<br>可以在递归函数中定义局部变量。</p>
<p>命令格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> 变量名=变量值</span><br></pre></td></tr></table></figure>
<p>例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> name=catgok</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line">&#125;</span><br><span class="line">func</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">catgok</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>第一行为函数内的name变量，第二行为函数外调用name变量，会发现此时该变量不存在。</p>
<hr>
<center>

<p><a href="/%E8%AF%AD%E8%A8%80/shell.html">返回目录</a></p>
</center>]]></content>
      <categories>
        <category>语言</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>语言</title>
    <url>/%E8%AF%AD%E8%A8%80.html</url>
    <content><![CDATA[<h2 id="1-shell"><a href="#1-shell" class="headerlink" title="1. shell"></a>1. <strong><a href="/%E8%AF%AD%E8%A8%80/shell.html">shell</a></strong></h2><h2 id="2-go"><a href="#2-go" class="headerlink" title="2. go"></a>2. <strong><a href="/%E8%AF%AD%E8%A8%80/go.html">go</a></strong></h2><h2 id="3-go"><a href="#3-go" class="headerlink" title="3. go"></a>3. <strong><a href="/%E8%AF%AD%E8%A8%80/go.html">go</a></strong></h2><span id="more"></span>
<h2 id="4-go"><a href="#4-go" class="headerlink" title="4. go"></a>4. <strong><a href="/%E8%AF%AD%E8%A8%80/go.html">go</a></strong></h2>]]></content>
      <categories>
        <category>语言</category>
      </categories>
  </entry>
  <entry>
    <title>模板</title>
    <url>/%E5%85%B6%E4%BB%96/%E6%A8%A1%E6%9D%BF.html</url>
    <content><![CDATA[<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h2 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h2><span id="more"></span>

<img data-src="/%E5%85%B6%E4%BB%96/%E6%A8%A1%E6%9D%BF/img.png" class="" title="本地图片">

<h2 id="网络图片"><a href="#网络图片" class="headerlink" title="网络图片"></a>网络图片</h2><p><img data-src="https://th.bing.com/th/id/OIP.cwIF_kizVZuERn_K9z4lgAHaHa?pid=ImgDet&rs=1" alt="网络图片"></p>
<h1 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h3><p>1.1</p>
<h3 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h3><p>1.2</p>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>2</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1><p><a href="https://zhuanlan.zhihu.com/p/441454622">MarkDown数学公式</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/450465546">Markdown&#x2F;LaTeX 数学公式和符号表</a></p>
<p>$e&#x3D;mc^2$</p>
<p>$a\le sl$</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="https://markdown.com.cn/editor">模板链接</a></p>
]]></content>
      <categories>
        <category>其他</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>其他,模板</tag>
      </tags>
  </entry>
</search>
